[
  {
    "signature": "scale(double val,double[] arr)",
    "name": "scale",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "arr"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "arr"
        },
        "comment": "Array to scale.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "val"
        },
        "comment": "Scalar.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "scaled copy of array with each entry multiplied by val.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "scaleInPlace(double val,double[] arr)",
    "name": "scaleInPlace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "arr"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "arr"
        },
        "comment": "Array to scale",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "val"
        },
        "comment": "Scalar",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "ebeAdd(double[] a,double[] b)",
    "name": "ebeAdd",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "First term of the addition.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Second term of the addition.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] + b[i].",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "ebeSubtract(double[] a,double[] b)",
    "name": "ebeSubtract",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "First term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Element to be subtracted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] - b[i].",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "ebeMultiply(double[] a,double[] b)",
    "name": "ebeMultiply",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "First factor of the multiplication.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Second factor of the multiplication.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] * b[i].",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "ebeDivide(double[] a,double[] b)",
    "name": "ebeDivide",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "Numerator of the division.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Denominator of the division.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] / b[i].",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "distance1(double[] p1,double[] p2)",
    "name": "distance1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "p1"
        },
        "comment": "the first point",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "p2"
        },
        "comment": "the second point",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L1 distance between the two points",
      "kind": "RETURN",
      "condition": "true ? result.equals(org.apache.commons.math3.util.MathArrays.distance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "distance1(int[] p1,int[] p2)",
    "name": "distance1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "p1"
        },
        "comment": "the first point",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "p2"
        },
        "comment": "the second point",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L1 distance between the two points",
      "kind": "RETURN",
      "condition": "true ? result.equals(org.apache.commons.math3.util.MathArrays.distance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "distance(double[] p1,double[] p2)",
    "name": "distance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "p1"
        },
        "comment": "the first point",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "p2"
        },
        "comment": "the second point",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L2 distance between the two points",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[1])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "cosAngle(double[] v1,double[] v2)",
    "name": "cosAngle",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "v1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "v2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "v1"
        },
        "comment": "Cartesian coordinates of the first vector.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "v2"
        },
        "comment": "Cartesian coordinates of the second vector.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cosine of the angle between the vectors.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "distance(int[] p1,int[] p2)",
    "name": "distance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "p1"
        },
        "comment": "the first point",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "p2"
        },
        "comment": "the second point",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L2 distance between the two points",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[1])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "distanceInf(double[] p1,double[] p2)",
    "name": "distanceInf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "p1"
        },
        "comment": "the first point",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "p2"
        },
        "comment": "the second point",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L∞ distance between the two points",
      "kind": "RETURN",
      "condition": "true ? result.equals(org.apache.commons.math3.util.MathArrays.distance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "distanceInf(int[] p1,int[] p2)",
    "name": "distanceInf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "p1"
        },
        "comment": "the first point",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "p2"
        },
        "comment": "the second point",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L∞ distance between the two points",
      "kind": "RETURN",
      "condition": "true ? result.equals(org.apache.commons.math3.util.MathArrays.distance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "isMonotonic(java.lang.Comparable[] val,org.apache.commons.math3.util.MathArrays.OrderDirection dir,boolean strict)",
    "name": "isMonotonic",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Comparable[]",
          "name": "Comparable[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Comparable",
            "name": "Comparable",
            "isArray": false
          }
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Comparable[]",
            "name": "Comparable[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Comparable",
              "name": "Comparable",
              "isArray": false
            }
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if sorted, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isMonotonic(double[] val,org.apache.commons.math3.util.MathArrays.OrderDirection dir,boolean strict)",
    "name": "isMonotonic",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if sorted, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "checkEqualLength(double[] a,double[] b,boolean abort)",
    "name": "checkEqualLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "abort"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "abort"
        },
        "comment": "Whether to throw an exception if the check fails.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the arrays have the same length.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "abort",
          "true"
        ],
        "comment": "if the lengths differ and abort is true.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkEqualLength(double[] a,double[] b)",
    "name": "checkEqualLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkEqualLength(int[] a,int[] b,boolean abort)",
    "name": "checkEqualLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "abort"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "abort"
        },
        "comment": "Whether to throw an exception if the check fails.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the arrays have the same length.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "abort",
          "true"
        ],
        "comment": "if the lengths differ and abort is true.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkEqualLength(int[] a,int[] b)",
    "name": "checkEqualLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkOrder(double[] val,org.apache.commons.math3.util.MathArrays.OrderDirection dir,boolean strict,boolean abort)",
    "name": "checkOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "abort"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "abort"
        },
        "comment": "Whether to throw an exception if the check fails.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is sorted.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [
          "abort",
          "true"
        ],
        "comment": "if the array is not sorted and abort is true.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkOrder(double[] val,org.apache.commons.math3.util.MathArrays.OrderDirection dir,boolean strict)",
    "name": "checkOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is not sorted.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkOrder(double[] val)",
    "name": "checkOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "val"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is not sorted.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkRectangular(long[][] in)",
    "name": "checkRectangular",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[][]",
          "name": "long[][]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[][]",
            "name": "long[][]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "in"
        },
        "comment": "array to be tested",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if input array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if input array is not rectangular",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkPositive(double[] in)",
    "name": "checkPositive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "in"
        },
        "comment": "Array to be tested",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NotStrictlyPositiveException",
          "name": "NotStrictlyPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any entries of the array are not strictly positive.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkNotNaN(double[] in)",
    "name": "checkNotNaN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "in"
        },
        "comment": "Array to be tested.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NotANumberException",
          "name": "NotANumberException",
          "isArray": false
        },
        "codeTags": [
          "NaN"
        ],
        "comment": "if an entry is NaN.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkNonNegative(long[] in)",
    "name": "checkNonNegative",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "in"
        },
        "comment": "Array to be tested",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NotPositiveException",
          "name": "NotPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any array entries are less than 0.",
        "kind": "THROWS",
        "condition": "args[0].length<0"
      }
    ]
  },
  {
    "signature": "checkNonNegative(long[][] in)",
    "name": "checkNonNegative",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[][]",
          "name": "long[][]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[][]",
            "name": "long[][]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "in"
        },
        "comment": "Array to be tested",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NotPositiveException",
          "name": "NotPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any array entries are less than 0.",
        "kind": "THROWS",
        "condition": "args[0].length<0"
      }
    ]
  },
  {
    "signature": "safeNorm(double[] v)",
    "name": "safeNorm",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "v"
        },
        "comment": "Vector of doubles.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the 2-norm of the vector.",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": []
  },
  {
    "signature": "sortInPlace(double[] x,double[][] yList)",
    "name": "sortInPlace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double[][]",
          "name": "double[][]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yList"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "Array to be sorted and used as a pattern for permutation of the other arrays.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[][]",
            "name": "double[][]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yList"
        },
        "comment": "Set of arrays whose permutations of entries will follow those performed on x.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "y",
          "x"
        ],
        "comment": "if any y is not the same size as x.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y"
        ],
        "comment": "if x or any y is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "sortInPlace(double[] x,org.apache.commons.math3.util.MathArrays.OrderDirection dir,double[][] yList)",
    "name": "sortInPlace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "double[][]",
          "name": "double[][]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yList"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "Array to be sorted and used as a pattern for permutation of the other arrays.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays.OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Order direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[][]",
            "name": "double[][]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yList"
        },
        "comment": "Set of arrays whose permutations of entries will follow those performed on x.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "y",
          "x"
        ],
        "comment": "if any y is not the same size as x.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y"
        ],
        "comment": "if x or any y is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[2]==null"
      }
    ]
  },
  {
    "signature": "copyOf(int[] source)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "source"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyOf(double[] source)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "source"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyOf(int[] source,int len)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "len"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "len"
        },
        "comment": "Number of entries to copy. If smaller then the source length, the copy will be truncated, if larger it will padded with zeroes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyOf(double[] source,int len)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "len"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "len"
        },
        "comment": "Number of entries to copy. If smaller then the source length, the copy will be truncated, if larger it will padded with zeroes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyOfRange(double[] source,int from,int to)",
    "name": "copyOfRange",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "from"
        },
        "comment": "Initial index of the range to be copied, inclusive.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "to"
        },
        "comment": "Final index of the range to be copied, exclusive. (This index may lie outside the array.)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "linearCombination(double[] a,double[] b)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "Factors.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "b"
        },
        "comment": "Factors.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Σi ai bi.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if arrays dimensions don't match",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "linearCombination(double a1,double b1,double a2,double b2)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a1"
        },
        "comment": "first factor of the first term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b1"
        },
        "comment": "second factor of the first term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a2"
        },
        "comment": "first factor of the second term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b2"
        },
        "comment": "second factor of the second term",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a1×b1 + a2×b2",
      "kind": "RETURN",
      "condition": "true ? result==args[1]+args[2]"
    },
    "throwsTags": []
  },
  {
    "signature": "linearCombination(double a1,double b1,double a2,double b2,double a3,double b3)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b3"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a1"
        },
        "comment": "first factor of the first term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b1"
        },
        "comment": "second factor of the first term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a2"
        },
        "comment": "first factor of the second term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b2"
        },
        "comment": "second factor of the second term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a3"
        },
        "comment": "first factor of the third term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b3"
        },
        "comment": "second factor of the third term",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a1×b1 + a2×b2 + a3×b3",
      "kind": "RETURN",
      "condition": "true ? result==args[1]+args[2]"
    },
    "throwsTags": []
  },
  {
    "signature": "linearCombination(double a1,double b1,double a2,double b2,double a3,double b3,double a4,double b4)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b3"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a4"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b4"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a1"
        },
        "comment": "first factor of the first term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b1"
        },
        "comment": "second factor of the first term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a2"
        },
        "comment": "first factor of the second term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b2"
        },
        "comment": "second factor of the second term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a3"
        },
        "comment": "first factor of the third term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b3"
        },
        "comment": "second factor of the third term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a4"
        },
        "comment": "first factor of the third term",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b4"
        },
        "comment": "second factor of the third term",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a1×b1 + a2×b2 + a3×b3 + a4×b4",
      "kind": "RETURN",
      "condition": "true ? result==args[1]+args[2]"
    },
    "throwsTags": []
  },
  {
    "signature": "equals(float[] x,float[] y)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "float[]",
          "name": "float[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "float[]",
          "name": "float[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "float[]",
            "name": "float[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "float",
              "name": "float",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "first array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float[]",
            "name": "float[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "float",
              "name": "float",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "second array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": "args[0]==null || args[1]==null ? result == true"
    },
    "throwsTags": []
  },
  {
    "signature": "equalsIncludingNaN(float[] x,float[] y)",
    "name": "equalsIncludingNaN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "float[]",
          "name": "float[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "float[]",
          "name": "float[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "float[]",
            "name": "float[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "float",
              "name": "float",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "first array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float[]",
            "name": "float[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "float",
              "name": "float",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "second array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements",
      "kind": "RETURN",
      "condition": "args[0]==null || args[1]==null ? result == true"
    },
    "throwsTags": []
  },
  {
    "signature": "equals(double[] x,double[] y)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "First array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "Second array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": "args[0]==null || args[1]==null ? result == true"
    },
    "throwsTags": []
  },
  {
    "signature": "equalsIncludingNaN(double[] x,double[] y)",
    "name": "equalsIncludingNaN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "First array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "Second array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": "args[0]==null || args[1]==null ? result == true"
    },
    "throwsTags": []
  },
  {
    "signature": "normalizeArray(double[] values,double normalizedSum)",
    "name": "normalizeArray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "normalizedSum"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "Input array to be normalized",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "normalizedSum"
        },
        "comment": "Target sum for the normalized array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the normalized array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathArithmeticException",
          "name": "MathArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the input array contains infinite elements or sums to zero.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "NaN"
        ],
        "comment": "if the target sum is infinite or NaN.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "buildArray(org.apache.commons.math3.Field field,int length)",
    "name": "buildArray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "T",
        "name": "T",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.Field",
          "name": "Field",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.Field",
            "name": "Field",
            "isArray": false
          },
          "name": "field"
        },
        "comment": "field to which array elements belong",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "of the array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "buildArray(org.apache.commons.math3.Field field,int rows,int columns)",
    "name": "buildArray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[][]",
      "name": "T[][]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "T",
        "name": "T",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.Field",
          "name": "Field",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rows"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columns"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.Field",
            "name": "Field",
            "isArray": false
          },
          "name": "field"
        },
        "comment": "field to which array elements belong",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "rows"
        },
        "comment": "number of rows in the array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "columns"
        },
        "comment": "number of columns (may be negative to build partial arrays in the same way new Field[rows][] works)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "convolve(double[] x,double[] h)",
    "name": "convolve",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "h"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "First sequence. Typically, this sequence will represent an input signal to a system.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "h"
        },
        "comment": "Second sequence. Typically, this sequence will represent the impulse response of the system.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the convolution of x and h. This array's length will be x.length + h.length - 1.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "h",
          "null"
        ],
        "comment": "if either x or h is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "h"
        ],
        "comment": "if either x or h is empty.",
        "kind": "THROWS",
        "condition": "args[0].length==0 || args[1].length==0"
      }
    ]
  },
  {
    "signature": "shuffle(int[] list,int start,org.apache.commons.math3.util.MathArrays.Position pos)",
    "name": "shuffle",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays.Position",
          "name": "Position",
          "isArray": false
        },
        "name": "pos"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "list"
        },
        "comment": "Array whose entries will be shuffled (in-place).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "Index at which shuffling begins.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays.Position",
            "name": "Position",
            "isArray": false
          },
          "name": "pos"
        },
        "comment": "Shuffling is performed for index positions between start and either the end (if MathArrays.Position.TAIL) or the beginning (if MathArrays.Position.HEAD) of the array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "shuffle(int[] list,int start,org.apache.commons.math3.util.MathArrays.Position pos,org.apache.commons.math3.random.RandomGenerator rng)",
    "name": "shuffle",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays.Position",
          "name": "Position",
          "isArray": false
        },
        "name": "pos"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.random.RandomGenerator",
          "name": "RandomGenerator",
          "isArray": false
        },
        "name": "rng"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "list"
        },
        "comment": "Array whose entries will be shuffled (in-place).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "Index at which shuffling begins.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays.Position",
            "name": "Position",
            "isArray": false
          },
          "name": "pos"
        },
        "comment": "Shuffling is performed for index positions between start and either the end (if MathArrays.Position.TAIL) or the beginning (if MathArrays.Position.HEAD) of the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.random.RandomGenerator",
            "name": "RandomGenerator",
            "isArray": false
          },
          "name": "rng"
        },
        "comment": "Random number generator.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "shuffle(int[] list,org.apache.commons.math3.random.RandomGenerator rng)",
    "name": "shuffle",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.random.RandomGenerator",
          "name": "RandomGenerator",
          "isArray": false
        },
        "name": "rng"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "list"
        },
        "comment": "Array whose entries will be shuffled (in-place).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.random.RandomGenerator",
            "name": "RandomGenerator",
            "isArray": false
          },
          "name": "rng"
        },
        "comment": "Random number generator.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "shuffle(int[] list)",
    "name": "shuffle",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "list"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "list"
        },
        "comment": "Array whose entries will be shuffled (in-place).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "natural(int n)",
    "name": "natural",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "Natural number.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array whose entries are the numbers 0, 1, ..., n-1. If n == 0, the returned array is empty.",
      "kind": "RETURN",
      "condition": "true ?result==0"
    },
    "throwsTags": []
  },
  {
    "signature": "sequence(int size,int start,int stride)",
    "name": "sequence",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "stride"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "size"
        },
        "comment": "Natural number.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "Natural number.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "stride"
        },
        "comment": "Natural number.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array whose entries are the numbers start, start + stride, ..., start + (size - 1) * stride. If size == 0, the returned array is empty.",
      "kind": "RETURN",
      "condition": "true ? result==args[1]+args[2]"
    },
    "throwsTags": []
  },
  {
    "signature": "verifyValues(double[] values,int begin,int length)",
    "name": "verifyValues",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the parameters are valid and designate a subarray of positive length",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the indices are invalid or the array is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "verifyValues(double[] values,int begin,int length,boolean allowEmpty)",
    "name": "verifyValues",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "allowEmpty"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "allowEmpty"
        },
        "comment": "if true then zero length arrays are allowed",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the parameters are valid",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the indices are invalid or the array is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "verifyValues(double[] values,double[] weights,int begin,int length)",
    "name": "verifyValues",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "weights"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "weights"
        },
        "comment": "the weights array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the parameters are valid and designate a subarray of positive length",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the indices are invalid or the array is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "verifyValues(double[] values,double[] weights,int begin,int length,boolean allowEmpty)",
    "name": "verifyValues",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "weights"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "allowEmpty"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "weights"
        },
        "comment": "the weights array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "allowEmpty"
        },
        "comment": "if true than allow zero length arrays to pass.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the parameters are valid.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either of the arrays are null",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array indices are not valid, the weights array contains NaN, infinite or negative elements, or there are no positive weights.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "concatenate(double[][] x)",
    "name": "concatenate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[][]",
          "name": "double[][]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[][]",
            "name": "double[][]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "list of double[] arrays to concatenate",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array consisting of the entries of the argument arrays",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any of the arrays are null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "unique(double[] data)",
    "name": "unique",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "data"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "data"
        },
        "comment": "array to scan",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "descending list of values included in the input array",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if data is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  }
]