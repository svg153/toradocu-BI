[
  {
    "signature": "EventState(org.apache.commons.math3.ode.events.EventHandler handler,double maxCheckInterval,double convergence,int maxIterationCount,org.apache.commons.math3.analysis.solvers.UnivariateSolver solver)",
    "name": "EventState",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.events.EventHandler",
          "name": "EventHandler",
          "isArray": false
        },
        "name": "handler"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxCheckInterval"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "convergence"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxIterationCount"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.analysis.solvers.UnivariateSolver",
          "name": "UnivariateSolver",
          "isArray": false
        },
        "name": "solver"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.events.EventHandler",
            "name": "EventHandler",
            "isArray": false
          },
          "name": "handler"
        },
        "comment": "event handler",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxCheckInterval"
        },
        "comment": "maximal time interval between switching function checks (this interval prevents missing sign changes in case the integration steps becomes very large)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "convergence"
        },
        "comment": "convergence threshold in the event time search",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxIterationCount"
        },
        "comment": "upper limit of the iteration count in the event time search",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.analysis.solvers.UnivariateSolver",
            "name": "UnivariateSolver",
            "isArray": false
          },
          "name": "solver"
        },
        "comment": "Root-finding algorithm to use to detect state events",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getEventHandler()",
    "name": "getEventHandler",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventHandler",
      "name": "EventHandler",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "underlying event handler",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setExpandable(org.apache.commons.math3.ode.ExpandableStatefulODE expandable)",
    "name": "setExpandable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
          "name": "ExpandableStatefulODE",
          "isArray": false
        },
        "name": "expandable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
            "name": "ExpandableStatefulODE",
            "isArray": false
          },
          "name": "expandable"
        },
        "comment": "equation being integrated",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getMaxCheckInterval()",
    "name": "getMaxCheckInterval",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "maximal time interval between events handler checks",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getConvergence()",
    "name": "getConvergence",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "convergence threshold for event localization",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMaxIterationCount()",
    "name": "getMaxIterationCount",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "upper limit in the iteration count for event localization",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator)",
    "name": "reinitializeBegin",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.StepInterpolator",
          "name": "StepInterpolator",
          "isArray": false
        },
        "name": "interpolator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.StepInterpolator",
            "name": "StepInterpolator",
            "isArray": false
          },
          "name": "interpolator"
        },
        "comment": "valid for the current step",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the interpolator throws one because the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator)",
    "name": "evaluateStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.StepInterpolator",
          "name": "StepInterpolator",
          "isArray": false
        },
        "name": "interpolator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.StepInterpolator",
            "name": "StepInterpolator",
            "isArray": false
          },
          "name": "interpolator"
        },
        "comment": "step interpolator for the proposed step",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the event handler triggers an event before the end of the proposed step",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the interpolator throws one because the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoBracketingException",
          "name": "NoBracketingException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the event cannot be bracketed",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getEventTime()",
    "name": "getEventTime",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "occurrence time of the event triggered in the current step or infinity if no events are triggered",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "stepAccepted(double t,double[] y)",
    "name": "stepAccepted",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "value of the independent time variable at the end of the step",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "array containing the current value of the state vector at the end of the step",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "stop()",
    "name": "stop",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the integration should be stopped",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "reset(double t,double[] y)",
    "name": "reset",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "value of the independent time variable at the beginning of the next step",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "array were to put the desired state vector at the beginning of the next step",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the integrator should reset the derivatives too",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]