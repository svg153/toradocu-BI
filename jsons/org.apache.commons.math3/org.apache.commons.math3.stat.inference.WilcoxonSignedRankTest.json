[
  {
    "signature": "WilcoxonSignedRankTest()",
    "name": "WilcoxonSignedRankTest",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
      "name": "WilcoxonSignedRankTest",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "WilcoxonSignedRankTest(org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy)",
    "name": "WilcoxonSignedRankTest",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
      "name": "WilcoxonSignedRankTest",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.stat.ranking.NaNStrategy",
          "name": "NaNStrategy",
          "isArray": false
        },
        "name": "nanStrategy"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.stat.ranking.TiesStrategy",
          "name": "TiesStrategy",
          "isArray": false
        },
        "name": "tiesStrategy"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.stat.ranking.NaNStrategy",
            "name": "NaNStrategy",
            "isArray": false
          },
          "name": "nanStrategy"
        },
        "comment": "specifies the strategy that should be used for Double.NaN's",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.stat.ranking.TiesStrategy",
            "name": "TiesStrategy",
            "isArray": false
          },
          "name": "tiesStrategy"
        },
        "comment": "specifies the strategy that should be used for ties",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "wilcoxonSignedRank(double[] x,double[] y)",
    "name": "wilcoxonSignedRank",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
      "name": "WilcoxonSignedRankTest",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "the first sample",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "the second sample",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "wilcoxonSignedRank statistic (the larger of W+ and W-)",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y",
          "null"
        ],
        "comment": "if x or y are null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y"
        ],
        "comment": "if x or y are zero-length.",
        "kind": "THROWS",
        "condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y"
        ],
        "comment": "if x and y do not have the same length.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "wilcoxonSignedRankTest(double[] x,double[] y,boolean exactPValue)",
    "name": "wilcoxonSignedRankTest",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
      "name": "WilcoxonSignedRankTest",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "exactPValue"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "x"
        },
        "comment": "the first sample",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "the second sample",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "exactPValue"
        },
        "comment": "if the exact p-value is wanted (only works for x.length <= 30, if true and x.length > 30, this is ignored because calculations may take too long)",
        "kind": "PARAM",
        "condition": "args[0].length>30 || args[1].length>30 && args[0].length>30"
      }
    ],
    "returnTag": {
      "comment": "p-value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y",
          "null"
        ],
        "comment": "if x or y are null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y"
        ],
        "comment": "if x or y are zero-length.",
        "kind": "THROWS",
        "condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "x",
          "y"
        ],
        "comment": "if x and y do not have the same length.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooLargeException",
          "name": "NumberIsTooLargeException",
          "isArray": false
        },
        "codeTags": [
          "exactPValue",
          "true",
          "x.length"
        ],
        "comment": "if exactPValue is true and x.length > 30",
        "kind": "THROWS",
        "condition": "args[2]==true && args[0].length>30"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.ConvergenceException",
          "name": "ConvergenceException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the p-value can not be computed due to a convergence error",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the maximum number of iterations is exceeded",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]