[
  {
    "signature": "HaltonSequenceGenerator(int dimension)",
    "name": "HaltonSequenceGenerator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.random.HaltonSequenceGenerator",
      "name": "HaltonSequenceGenerator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.random.HaltonSequenceGenerator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dimension"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "dimension"
        },
        "comment": "the space dimension",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.OutOfRangeException",
          "name": "OutOfRangeException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the space dimension is outside the allowed range of [1, 40]",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "HaltonSequenceGenerator(int dimension,int[] bases,int[] weights)",
    "name": "HaltonSequenceGenerator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.random.HaltonSequenceGenerator",
      "name": "HaltonSequenceGenerator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.random.HaltonSequenceGenerator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dimension"
      },
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "bases"
      },
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "weights"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "dimension"
        },
        "comment": "the space dimension",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "bases"
        },
        "comment": "the base number for each dimension, entries should be (pairwise) prime, may not be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "weights"
        },
        "comment": "the weights used during scrambling, may be null in which case no scrambling will be performed",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if base is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.OutOfRangeException",
          "name": "OutOfRangeException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the space dimension is outside the range [1, len], where len refers to the length of the bases array",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if weights is non-null and the length of the input arrays differ",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "nextVector()",
    "name": "nextVector",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.random.HaltonSequenceGenerator",
      "name": "HaltonSequenceGenerator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.random.HaltonSequenceGenerator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "scramble(int i,int j,int b,int digit)",
    "name": "scramble",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.random.HaltonSequenceGenerator",
      "name": "HaltonSequenceGenerator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.random.HaltonSequenceGenerator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "j"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "digit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "i"
        },
        "comment": "the dimension index",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "j"
        },
        "comment": "the digit index",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the base for this dimension",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "digit"
        },
        "comment": "the j-th digit",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the scrambled digit",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": []
  },
  {
    "signature": "skipTo(int index)",
    "name": "skipTo",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.random.HaltonSequenceGenerator",
      "name": "HaltonSequenceGenerator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.random.HaltonSequenceGenerator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the index in the sequence to skip to",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the i-th point in the Halton sequence",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NotPositiveException",
          "name": "NotPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if index < 0",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "getNextIndex()",
    "name": "getNextIndex",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.random.HaltonSequenceGenerator",
      "name": "HaltonSequenceGenerator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.random.HaltonSequenceGenerator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the index of the next point",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]