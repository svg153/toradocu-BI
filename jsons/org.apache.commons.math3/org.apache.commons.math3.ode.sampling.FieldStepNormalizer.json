[
  {
    "signature": "FieldStepNormalizer(double h,org.apache.commons.math3.ode.sampling.FieldFixedStepHandler handler)",
    "name": "FieldStepNormalizer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
      "name": "FieldStepNormalizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "h"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
          "name": "FieldFixedStepHandler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "h"
        },
        "comment": "fixed time step (sign is not used)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
            "name": "FieldFixedStepHandler",
            "isArray": false
          },
          "name": "handler"
        },
        "comment": "fixed time step handler to wrap",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "FieldStepNormalizer(double h,org.apache.commons.math3.ode.sampling.FieldFixedStepHandler handler,org.apache.commons.math3.ode.sampling.StepNormalizerMode mode)",
    "name": "FieldStepNormalizer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
      "name": "FieldStepNormalizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "h"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
          "name": "FieldFixedStepHandler",
          "isArray": false
        },
        "name": "handler"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerMode",
          "name": "StepNormalizerMode",
          "isArray": false
        },
        "name": "mode"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "h"
        },
        "comment": "fixed time step (sign is not used)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
            "name": "FieldFixedStepHandler",
            "isArray": false
          },
          "name": "handler"
        },
        "comment": "fixed time step handler to wrap",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerMode",
            "name": "StepNormalizerMode",
            "isArray": false
          },
          "name": "mode"
        },
        "comment": "step normalizer mode to use",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "FieldStepNormalizer(double h,org.apache.commons.math3.ode.sampling.FieldFixedStepHandler handler,org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds)",
    "name": "FieldStepNormalizer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
      "name": "FieldStepNormalizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "h"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
          "name": "FieldFixedStepHandler",
          "isArray": false
        },
        "name": "handler"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerBounds",
          "name": "StepNormalizerBounds",
          "isArray": false
        },
        "name": "bounds"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "h"
        },
        "comment": "fixed time step (sign is not used)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
            "name": "FieldFixedStepHandler",
            "isArray": false
          },
          "name": "handler"
        },
        "comment": "fixed time step handler to wrap",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerBounds",
            "name": "StepNormalizerBounds",
            "isArray": false
          },
          "name": "bounds"
        },
        "comment": "step normalizer bounds setting to use",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "FieldStepNormalizer(double h,org.apache.commons.math3.ode.sampling.FieldFixedStepHandler handler,org.apache.commons.math3.ode.sampling.StepNormalizerMode mode,org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds)",
    "name": "FieldStepNormalizer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
      "name": "FieldStepNormalizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "h"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
          "name": "FieldFixedStepHandler",
          "isArray": false
        },
        "name": "handler"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerMode",
          "name": "StepNormalizerMode",
          "isArray": false
        },
        "name": "mode"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerBounds",
          "name": "StepNormalizerBounds",
          "isArray": false
        },
        "name": "bounds"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "h"
        },
        "comment": "fixed time step (sign is not used)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldFixedStepHandler",
            "name": "FieldFixedStepHandler",
            "isArray": false
          },
          "name": "handler"
        },
        "comment": "fixed time step handler to wrap",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerMode",
            "name": "StepNormalizerMode",
            "isArray": false
          },
          "name": "mode"
        },
        "comment": "step normalizer mode to use",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.StepNormalizerBounds",
            "name": "StepNormalizerBounds",
            "isArray": false
          },
          "name": "bounds"
        },
        "comment": "step normalizer bounds setting to use",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "init(org.apache.commons.math3.ode.FieldODEStateAndDerivative initialState,org.apache.commons.math3.RealFieldElement finalTime)",
    "name": "init",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
      "name": "FieldStepNormalizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.FieldODEStateAndDerivative",
          "name": "FieldODEStateAndDerivative",
          "isArray": false
        },
        "name": "initialState"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement",
          "name": "RealFieldElement",
          "isArray": false
        },
        "name": "finalTime"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "handleStep(org.apache.commons.math3.ode.sampling.FieldStepInterpolator interpolator,boolean isLast)",
    "name": "handleStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
      "name": "FieldStepNormalizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.sampling.FieldStepNormalizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepInterpolator",
          "name": "FieldStepInterpolator",
          "isArray": false
        },
        "name": "interpolator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isLast"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.FieldStepInterpolator",
            "name": "FieldStepInterpolator",
            "isArray": false
          },
          "name": "interpolator"
        },
        "comment": "interpolator for the last accepted step. For efficiency purposes, the various integrators reuse the same object on each call, so if the instance wants to keep it across all calls (for example to provide at the end of the integration a continuous model valid throughout the integration range), it should build a local copy using the clone method and store this copy.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "isLast"
        },
        "comment": "true if the step is the last one",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the interpolator throws one because the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]