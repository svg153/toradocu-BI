[
  {
    "signature": "MultistepFieldIntegrator(org.apache.commons.math3.Field field,java.lang.String name,int nSteps,int order,double minStep,double maxStep,double scalAbsoluteTolerance,double scalRelativeTolerance)",
    "name": "MultistepFieldIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.Field",
          "name": "Field",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "nSteps"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "order"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "scalAbsoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "scalRelativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.Field",
            "name": "Field",
            "isArray": false
          },
          "name": "field"
        },
        "comment": "field to which the time and state vector elements belong",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "name of the method",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "nSteps"
        },
        "comment": "number of steps of the multistep method (excluding the one being computed)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "order"
        },
        "comment": "order of the method",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minStep"
        },
        "comment": "minimal step (must be positive even for backward integration), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": "args[4]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxStep"
        },
        "comment": "maximal step (must be positive even for backward integration)",
        "kind": "PARAM",
        "condition": "args[5]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "scalAbsoluteTolerance"
        },
        "comment": "allowed absolute error",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "scalRelativeTolerance"
        },
        "comment": "allowed relative error",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if number of steps is smaller than 2",
        "kind": "THROWS",
        "condition": "args[2]<2"
      }
    ]
  },
  {
    "signature": "MultistepFieldIntegrator(org.apache.commons.math3.Field field,java.lang.String name,int nSteps,int order,double minStep,double maxStep,double[] vecAbsoluteTolerance,double[] vecRelativeTolerance)",
    "name": "MultistepFieldIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.Field",
          "name": "Field",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "nSteps"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "order"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxStep"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "vecAbsoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "vecRelativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.Field",
            "name": "Field",
            "isArray": false
          },
          "name": "field"
        },
        "comment": "field to which the time and state vector elements belong",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "name of the method",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "nSteps"
        },
        "comment": "number of steps of the multistep method (excluding the one being computed)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "order"
        },
        "comment": "order of the method",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minStep"
        },
        "comment": "minimal step (must be positive even for backward integration), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": "args[4]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxStep"
        },
        "comment": "maximal step (must be positive even for backward integration)",
        "kind": "PARAM",
        "condition": "args[5]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "vecAbsoluteTolerance"
        },
        "comment": "allowed absolute error",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "vecRelativeTolerance"
        },
        "comment": "allowed relative error",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getStarterIntegrator()",
    "name": "getStarterIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.ode.FirstOrderFieldIntegrator",
      "name": "FirstOrderFieldIntegrator",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "starter integrator",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setStarterIntegrator(org.apache.commons.math3.ode.FirstOrderFieldIntegrator starterIntegrator)",
    "name": "setStarterIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.FirstOrderFieldIntegrator",
          "name": "FirstOrderFieldIntegrator",
          "isArray": false
        },
        "name": "starterIntegrator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.FirstOrderFieldIntegrator",
            "name": "FirstOrderFieldIntegrator",
            "isArray": false
          },
          "name": "starterIntegrator"
        },
        "comment": "starter integrator",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "start(org.apache.commons.math3.ode.FieldExpandableODE equations,org.apache.commons.math3.ode.FieldODEState initialState,org.apache.commons.math3.RealFieldElement t)",
    "name": "start",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.FieldExpandableODE",
          "name": "FieldExpandableODE",
          "isArray": false
        },
        "name": "equations"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.FieldODEState",
          "name": "FieldODEState",
          "isArray": false
        },
        "name": "initialState"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement",
          "name": "RealFieldElement",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.FieldExpandableODE",
            "name": "FieldExpandableODE",
            "isArray": false
          },
          "name": "equations"
        },
        "comment": "complete set of differential equations to integrate",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.FieldODEState",
            "name": "FieldODEState",
            "isArray": false
          },
          "name": "initialState"
        },
        "comment": "initial state (time, primary and secondary state vectors)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement",
            "name": "RealFieldElement",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "target time for the integration (can be set to a value smaller than t0 for backward integration)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if arrays dimension do not match equations settings",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if integration step is too small",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoBracketingException",
          "name": "NoBracketingException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the location of an event cannot be bracketed",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "initializeHighOrderDerivatives(org.apache.commons.math3.RealFieldElement h,org.apache.commons.math3.RealFieldElement[] t,org.apache.commons.math3.RealFieldElement[][] y,org.apache.commons.math3.RealFieldElement[][] yDot)",
    "name": "initializeHighOrderDerivatives",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.Array2DRowFieldMatrix",
      "name": "Array2DRowFieldMatrix",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement",
          "name": "RealFieldElement",
          "isArray": false
        },
        "name": "h"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement[]",
          "name": "RealFieldElement[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement",
            "name": "RealFieldElement",
            "isArray": false
          }
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement[][]",
          "name": "RealFieldElement[][]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement",
            "name": "RealFieldElement",
            "isArray": false
          }
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement[][]",
          "name": "RealFieldElement[][]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement",
            "name": "RealFieldElement",
            "isArray": false
          }
        },
        "name": "yDot"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement",
            "name": "RealFieldElement",
            "isArray": false
          },
          "name": "h"
        },
        "comment": "step size to use for scaling",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement[]",
            "name": "RealFieldElement[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "org.apache.commons.math3.RealFieldElement",
              "name": "RealFieldElement",
              "isArray": false
            }
          },
          "name": "t"
        },
        "comment": "first steps times",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement[][]",
            "name": "RealFieldElement[][]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "org.apache.commons.math3.RealFieldElement",
              "name": "RealFieldElement",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "first steps states",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement[][]",
            "name": "RealFieldElement[][]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "org.apache.commons.math3.RealFieldElement",
              "name": "RealFieldElement",
              "isArray": false
            }
          },
          "name": "yDot"
        },
        "comment": "first steps derivatives",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Nordieck vector at first step (h2/2 y''n, h3/6 y'''n ... hk/k! y(k)n)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMinReduction()",
    "name": "getMinReduction",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "minimal reduction factor",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setMinReduction(double minReduction)",
    "name": "setMinReduction",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minReduction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minReduction"
        },
        "comment": "minimal reduction factor",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getMaxGrowth()",
    "name": "getMaxGrowth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "maximal growth factor",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setMaxGrowth(double maxGrowth)",
    "name": "setMaxGrowth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxGrowth"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxGrowth"
        },
        "comment": "maximal growth factor",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getSafety()",
    "name": "getSafety",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "safety factor",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setSafety(double safety)",
    "name": "setSafety",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "safety"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "safety"
        },
        "comment": "safety factor",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getNSteps()",
    "name": "getNSteps",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "number of steps of the multistep method (excluding the one being computed)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "rescale(org.apache.commons.math3.RealFieldElement newStepSize)",
    "name": "rescale",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement",
          "name": "RealFieldElement",
          "isArray": false
        },
        "name": "newStepSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement",
            "name": "RealFieldElement",
            "isArray": false
          },
          "name": "newStepSize"
        },
        "comment": "new step size to use in the scaled and Nordsieck arrays",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "computeStepGrowShrinkFactor(org.apache.commons.math3.RealFieldElement error)",
    "name": "computeStepGrowShrinkFactor",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
      "name": "MultistepFieldIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.MultistepFieldIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.RealFieldElement",
          "name": "RealFieldElement",
          "isArray": false
        },
        "name": "error"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.RealFieldElement",
            "name": "RealFieldElement",
            "isArray": false
          },
          "name": "error"
        },
        "comment": "normalized error of the current step",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "grow/shrink factor for next step",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]