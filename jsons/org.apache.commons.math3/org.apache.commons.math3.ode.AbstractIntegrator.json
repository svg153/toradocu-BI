[
  {
    "signature": "AbstractIntegrator(java.lang.String name)",
    "name": "AbstractIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "name of the method",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "AbstractIntegrator()",
    "name": "AbstractIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getName()",
    "name": "getName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler handler)",
    "name": "addStepHandler",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.StepHandler",
          "name": "StepHandler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getStepHandlers()",
    "name": "getStepHandlers",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "clearStepHandlers()",
    "name": "clearStepHandlers",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addEventHandler(org.apache.commons.math3.ode.events.EventHandler handler,double maxCheckInterval,double convergence,int maxIterationCount)",
    "name": "addEventHandler",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.events.EventHandler",
          "name": "EventHandler",
          "isArray": false
        },
        "name": "handler"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxCheckInterval"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "convergence"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxIterationCount"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addEventHandler(org.apache.commons.math3.ode.events.EventHandler handler,double maxCheckInterval,double convergence,int maxIterationCount,org.apache.commons.math3.analysis.solvers.UnivariateSolver solver)",
    "name": "addEventHandler",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.events.EventHandler",
          "name": "EventHandler",
          "isArray": false
        },
        "name": "handler"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxCheckInterval"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "convergence"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxIterationCount"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.analysis.solvers.UnivariateSolver",
          "name": "UnivariateSolver",
          "isArray": false
        },
        "name": "solver"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getEventHandlers()",
    "name": "getEventHandlers",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "clearEventHandlers()",
    "name": "clearEventHandlers",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getCurrentStepStart()",
    "name": "getCurrentStepStart",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getCurrentSignedStepsize()",
    "name": "getCurrentSignedStepsize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "setMaxEvaluations(int maxEvaluations)",
    "name": "setMaxEvaluations",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxEvaluations"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getMaxEvaluations()",
    "name": "getMaxEvaluations",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getEvaluations()",
    "name": "getEvaluations",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "initIntegration(double t0,double[] y0,double t)",
    "name": "initIntegration",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t0"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y0"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t0"
        },
        "comment": "start value of the independent time variable",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y0"
        },
        "comment": "array containing the start value of the state vector",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "target time for the integration",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE equations)",
    "name": "setEquations",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
          "name": "ExpandableStatefulODE",
          "isArray": false
        },
        "name": "equations"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
            "name": "ExpandableStatefulODE",
            "isArray": false
          },
          "name": "equations"
        },
        "comment": "equations to set",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getExpandable()",
    "name": "getExpandable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
      "name": "ExpandableStatefulODE",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "differential equations to integrate",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEvaluationsCounter()",
    "name": "getEvaluationsCounter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Incrementor",
      "name": "Incrementor",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "evaluations counter",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCounter()",
    "name": "getCounter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.IntegerSequence.Incrementor",
      "name": "Incrementor",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "evaluations counter",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations equations,double t0,double[] y0,double t,double[] y)",
    "name": "integrate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.FirstOrderDifferentialEquations",
          "name": "FirstOrderDifferentialEquations",
          "isArray": false
        },
        "name": "equations"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t0"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y0"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "integrate(org.apache.commons.math3.ode.ExpandableStatefulODE equations,double t)",
    "name": "integrate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
          "name": "ExpandableStatefulODE",
          "isArray": false
        },
        "name": "equations"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
            "name": "ExpandableStatefulODE",
            "isArray": false
          },
          "name": "equations"
        },
        "comment": "complete set of differential equations to integrate",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "target time for the integration (can be set to a value smaller than t0 for backward integration)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if integration step is too small",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the dimension of the complete state does not match the complete equations sets dimension",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoBracketingException",
          "name": "NoBracketingException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the location of an event cannot be bracketed",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "computeDerivatives(double t,double[] y,double[] yDot)",
    "name": "computeDerivatives",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yDot"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "current value of the independent time variable",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "array containing the current value of the state vector",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yDot"
        },
        "comment": "placeholder array where to put the time derivative of the state vector",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if arrays dimensions do not match equations settings",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "integrate(ExpandableStatefulODE, double)",
          "integrate(FirstOrderDifferentialEquations, double, double[], double, double[])"
        ],
        "comment": "if the ODE equations have not been set (i.e. if this method is called outside of a call to integrate(ExpandableStatefulODE, double) or integrate(FirstOrderDifferentialEquations, double, double[], double, double[]))",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "setStateInitialized(boolean stateInitialized)",
    "name": "setStateInitialized",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "stateInitialized"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "stateInitialized"
        },
        "comment": "new value for the flag",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator interpolator,double[] y,double[] yDot,double tEnd)",
    "name": "acceptStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator",
          "name": "AbstractStepInterpolator",
          "isArray": false
        },
        "name": "interpolator"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yDot"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tEnd"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator",
            "name": "AbstractStepInterpolator",
            "isArray": false
          },
          "name": "interpolator"
        },
        "comment": "step interpolator",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y"
        },
        "comment": "state vector at step end time, must be reset if an event asks for resetting or if an events stops integration during the step",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yDot"
        },
        "comment": "placeholder array where to put the time derivative of the state vector",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tEnd"
        },
        "comment": "final integration time",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "time at end of step",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[1])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the interpolator throws one because the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoBracketingException",
          "name": "NoBracketingException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the location of an event cannot be bracketed",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if arrays dimensions do not match equations settings",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE equations,double t)",
    "name": "sanityChecks",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.AbstractIntegrator",
      "name": "AbstractIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.AbstractIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
          "name": "ExpandableStatefulODE",
          "isArray": false
        },
        "name": "equations"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
            "name": "ExpandableStatefulODE",
            "isArray": false
          },
          "name": "equations"
        },
        "comment": "set of differential equations",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "target time for the integration",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if integration span is too small",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if adaptive step size integrators tolerance arrays dimensions are not compatible with equations settings",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]