[
  {
    "signature": "sum(double[] values)",
    "name": "sum",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "array of values to sum",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": "args[0].length==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.sumSq())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "sum(double[] values,int begin,int length)",
    "name": "sum",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[2]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.sum())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "sumSq(double[] values)",
    "name": "sumSq",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum of the squared values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "sumSq(double[] values,int begin,int length)",
    "name": "sumSq",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum of the squares of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[2]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.sum())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "product(double[] values)",
    "name": "product",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the product of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "product(double[] values,int begin,int length)",
    "name": "product",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the product of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[2]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.product())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "sumLog(double[] values)",
    "name": "sumLog",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum of the natural logs of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "sumLog(double[] values,int begin,int length)",
    "name": "sumLog",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum of the natural logs of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "mean(double[] values)",
    "name": "mean",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the mean of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": "args[0].length==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.min())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "mean(double[] values,int begin,int length)",
    "name": "mean",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the mean of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[2]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.mean())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "geometricMean(double[] values)",
    "name": "geometricMean",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the geometric mean of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "geometricMean(double[] values,int begin,int length)",
    "name": "geometricMean",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the geometric mean of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "result==0"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "variance(double[] values)",
    "name": "variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "variance(double[] values,int begin,int length)",
    "name": "variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[2]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.variance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "variance(double[] values,double mean,int begin,int length)",
    "name": "variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "the precomputed mean value",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[3]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.variance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "variance(double[] values,double mean)",
    "name": "variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "the precomputed mean value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": "args[0].length==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.variance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "populationVariance(double[] values)",
    "name": "populationVariance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the population variance of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "populationVariance(double[] values,int begin,int length)",
    "name": "populationVariance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the population variance of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[2]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.populationVariance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "populationVariance(double[] values,double mean,int begin,int length)",
    "name": "populationVariance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "the precomputed mean value",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the population variance of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": "args[3]==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.populationVariance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "populationVariance(double[] values,double mean)",
    "name": "populationVariance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "the precomputed mean value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the population variance of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": "args[0].length==0 ? result.equals(org.apache.commons.math3.stat.StatUtils.populationVariance())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "max(double[] values)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the maximum of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "max(double[] values,int begin,int length)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the maximum of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "min(double[] values)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the minimum of the values or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "min(double[] values,int begin,int length)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "the input array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the minimum of the values or Double.NaN if length = 0",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the array is null or the array index parameters are not valid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "percentile(double[] values,double p)",
    "name": "percentile",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "input array of values",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "the percentile value to compute",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the percentile value or Double.NaN if the array is empty",
      "kind": "RETURN",
      "condition": "args[0].length==0 ? result.equals(args[1])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "values"
        ],
        "comment": "if values is null or p is invalid",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "percentile(double[] values,int begin,int length,double p)",
    "name": "percentile",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "values"
        },
        "comment": "array of input values",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "the percentile to compute",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "the first (0-based) element to include in the computation",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of array elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the percentile value",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[3])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the parameters are not valid or the input array is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "sumDifference(double[] sample1,double[] sample2)",
    "name": "sumDifference",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample1"
        },
        "comment": "the first array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample2"
        },
        "comment": "the second array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "sum of paired differences",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the arrays do not have the same (positive) length.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the sample arrays are empty.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "meanDifference(double[] sample1,double[] sample2)",
    "name": "meanDifference",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample1"
        },
        "comment": "the first array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample2"
        },
        "comment": "the second array",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "mean of paired differences",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the arrays do not have the same (positive) length.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the sample arrays are empty.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "varianceDifference(double[] sample1,double[] sample2,double meanDifference)",
    "name": "varianceDifference",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "meanDifference"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample1"
        },
        "comment": "the first array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample2"
        },
        "comment": "the second array",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "meanDifference"
        },
        "comment": "the mean difference between corresponding entries",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "variance of paired differences",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the arrays do not have the same length.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the arrays length is less than 2.",
        "kind": "THROWS",
        "condition": "args[0].length<2"
      }
    ]
  },
  {
    "signature": "normalize(double[] sample)",
    "name": "normalize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample"
        },
        "comment": "Sample to normalize.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "normalized (standardized) sample.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mode(double[] sample)",
    "name": "mode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample"
        },
        "comment": "input data",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "array of array of the most frequently occurring element(s) sorted in ascending order.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the indices are invalid or the array is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "mode(double[] sample,int begin,int length)",
    "name": "mode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.stat.StatUtils",
      "name": "StatUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.stat.StatUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "sample"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "sample"
        },
        "comment": "input data",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index (0-based) of the first array element to include",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "array of array of the most frequently occurring element(s) sorted in ascending order.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the indices are invalid or the array is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]