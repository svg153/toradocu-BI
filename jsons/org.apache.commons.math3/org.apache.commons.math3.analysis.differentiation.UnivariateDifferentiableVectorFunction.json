[
  {
    "signature": "value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure x)",
    "name": "value",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction",
      "name": "UnivariateDifferentiableVectorFunction",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]",
      "name": "DerivativeStructure[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure",
        "name": "DerivativeStructure",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure",
          "name": "DerivativeStructure",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure",
            "name": "DerivativeStructure",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the point for which the function value should be computed",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the value",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "x"
        ],
        "comment": "if x does not satisfy the function's constraints (argument out of bound, or unsupported derivative order for example)",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]