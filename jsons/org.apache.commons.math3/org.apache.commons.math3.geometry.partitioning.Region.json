[
  {
    "signature": "buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree newTree)",
    "name": "buildNew",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BSPTree",
          "name": "BSPTree",
          "isArray": false
        },
        "name": "newTree"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BSPTree",
            "name": "BSPTree",
            "isArray": false
          },
          "name": "newTree"
        },
        "comment": "inside/outside BSP tree representing the new region",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the built region",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copySelf()",
    "name": "copySelf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new region, copy of the instance",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the instance is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree node)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BSPTree",
          "name": "BSPTree",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BSPTree",
            "name": "BSPTree",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "root node of the sub-tree (must have Region tree semantics, i.e. the leaf nodes must have Boolean attributes representing an inside/outside property)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the sub-tree starting at the given node is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isFull()",
    "name": "isFull",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the instance covers the full space",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isFull(org.apache.commons.math3.geometry.partitioning.BSPTree node)",
    "name": "isFull",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BSPTree",
          "name": "BSPTree",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BSPTree",
            "name": "BSPTree",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "root node of the sub-tree (must have Region tree semantics, i.e. the leaf nodes must have Boolean attributes representing an inside/outside property)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the sub-tree starting at the given node covers the full space",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(org.apache.commons.math3.geometry.partitioning.Region region)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
          "name": "Region",
          "isArray": false
        },
        "name": "region"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
            "name": "Region",
            "isArray": false
          },
          "name": "region"
        },
        "comment": "region to check against the instance",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the instance contains the specified tree",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "checkPoint(org.apache.commons.math3.geometry.Point point)",
    "name": "checkPoint",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.Point",
          "name": "Point",
          "isArray": false
        },
        "name": "point"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.Point",
            "name": "Point",
            "isArray": false
          },
          "name": "point"
        },
        "comment": "point to check",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a code representing the point status: either Region.Location.INSIDE, Region.Location.OUTSIDE or Region.Location.BOUNDARY",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "projectToBoundary(org.apache.commons.math3.geometry.Point point)",
    "name": "projectToBoundary",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BoundaryProjection",
      "name": "BoundaryProjection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.Point",
          "name": "Point",
          "isArray": false
        },
        "name": "point"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.Point",
            "name": "Point",
            "isArray": false
          },
          "name": "point"
        },
        "comment": "point to check",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "projection of the point on the boundary",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTree(boolean includeBoundaryAttributes)",
    "name": "getTree",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.BSPTree",
      "name": "BSPTree",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "includeBoundaryAttributes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "includeBoundaryAttributes"
        },
        "comment": "if true, the boundary attributes at internal nodes are guaranteed to be included (they may be included even if the argument is false, if they have already been computed due to a previous call)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "underlying BSP tree",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBoundarySize()",
    "name": "getBoundarySize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the size of the boundary (this is 0 in 1D, a length in 2D, an area in 3D ...)",
      "kind": "RETURN",
      "condition": "true ?result==0"
    },
    "throwsTags": []
  },
  {
    "signature": "getSize()",
    "name": "getSize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the size of the instance (this is a length in 1D, an area in 2D, a volume in 3D ...)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBarycenter()",
    "name": "getBarycenter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.Point",
      "name": "Point",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "an object representing the barycenter",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "side(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)",
    "name": "side",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Side",
      "name": "Side",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Hyperplane",
          "name": "Hyperplane",
          "isArray": false
        },
        "name": "hyperplane"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Hyperplane",
            "name": "Hyperplane",
            "isArray": false
          },
          "name": "hyperplane"
        },
        "comment": "reference hyperplane",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "one of Side.PLUS, Side.MINUS, Side.BOTH or Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub)",
    "name": "intersection",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "Region",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.Region",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.SubHyperplane",
      "name": "SubHyperplane",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.geometry.partitioning.SubHyperplane",
          "name": "SubHyperplane",
          "isArray": false
        },
        "name": "sub"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.geometry.partitioning.SubHyperplane",
            "name": "SubHyperplane",
            "isArray": false
          },
          "name": "sub"
        },
        "comment": "sub-hyperplane traversing the region",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "filtered sub-hyperplane",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]