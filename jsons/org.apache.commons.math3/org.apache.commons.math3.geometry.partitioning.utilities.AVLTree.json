[
  {
    "signature": "AVLTree()",
    "name": "AVLTree",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "insert(java.lang.Comparable element)",
    "name": "insert",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Comparable",
          "name": "Comparable",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Comparable",
            "name": "Comparable",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "element to insert (silently ignored if null)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "delete(java.lang.Comparable element)",
    "name": "delete",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Comparable",
          "name": "Comparable",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Comparable",
            "name": "Comparable",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "element to delete (silently ignored if null)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the element was deleted from the tree",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the tree is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "number of elements contained in the tree",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSmallest()",
    "name": "getSmallest",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node",
      "name": "Node",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the tree node containing the smallest element in the tree or null if the tree is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLargest()",
    "name": "getLargest",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node",
      "name": "Node",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the tree node containing the largest element in the tree or null if the tree is empty",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNotSmaller(java.lang.Comparable reference)",
    "name": "getNotSmaller",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node",
      "name": "Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Comparable",
          "name": "Comparable",
          "isArray": false
        },
        "name": "reference"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Comparable",
            "name": "Comparable",
            "isArray": false
          },
          "name": "reference"
        },
        "comment": "reference object (may not be in the tree)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the tree node containing the smallest element not smaller than the reference object or null if either the tree is empty or all its elements are smaller than the reference object",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNotLarger(java.lang.Comparable reference)",
    "name": "getNotLarger",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
      "name": "AVLTree",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node",
      "name": "Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Comparable",
          "name": "Comparable",
          "isArray": false
        },
        "name": "reference"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Comparable",
            "name": "Comparable",
            "isArray": false
          },
          "name": "reference"
        },
        "comment": "reference object (may not be in the tree)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the tree node containing the largest element not larger than the reference object (in which case the node is guaranteed not to be empty) or null if either the tree is empty or all its elements are larger than the reference object",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]