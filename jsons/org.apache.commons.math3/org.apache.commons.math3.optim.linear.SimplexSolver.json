[
  {
    "signature": "SimplexSolver()",
    "name": "SimplexSolver",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "SimplexSolver(double epsilon)",
    "name": "SimplexSolver",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "epsilon"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "epsilon"
        },
        "comment": "Amount of error to accept for algorithm convergence.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "SimplexSolver(double epsilon,int maxUlps)",
    "name": "SimplexSolver",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "epsilon"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxUlps"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "epsilon"
        },
        "comment": "Amount of error to accept for algorithm convergence.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxUlps"
        },
        "comment": "Amount of error to accept in floating point comparisons.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "SimplexSolver(double epsilon,int maxUlps,double cutOff)",
    "name": "SimplexSolver",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "epsilon"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxUlps"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "cutOff"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "epsilon"
        },
        "comment": "Amount of error to accept for algorithm convergence.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxUlps"
        },
        "comment": "Amount of error to accept in floating point comparisons.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "cutOff"
        },
        "comment": "Values smaller than the cutOff are treated as zero.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "optimize(org.apache.commons.math3.optim.OptimizationData[] optData)",
    "name": "optimize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.optim.PointValuePair",
      "name": "PointValuePair",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.optim.OptimizationData[]",
          "name": "OptimizationData[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "org.apache.commons.math3.optim.OptimizationData",
            "name": "OptimizationData",
            "isArray": false
          }
        },
        "name": "optData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.optim.OptimizationData[]",
            "name": "OptimizationData[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "org.apache.commons.math3.optim.OptimizationData",
              "name": "OptimizationData",
              "isArray": false
            }
          },
          "name": "optData"
        },
        "comment": "Optimization data. In addition to those documented in LinearOptimizer, this method will register the following data: SolutionCallback PivotSelectionRule",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a point/value pair that satisfies the convergence criteria.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.TooManyIterationsException",
          "name": "TooManyIterationsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the maximal number of iterations is exceeded.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)",
    "name": "parseOptimizationData",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.optim.OptimizationData[]",
          "name": "OptimizationData[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "org.apache.commons.math3.optim.OptimizationData",
            "name": "OptimizationData",
            "isArray": false
          }
        },
        "name": "optData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.optim.OptimizationData[]",
            "name": "OptimizationData[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "org.apache.commons.math3.optim.OptimizationData",
              "name": "OptimizationData",
              "isArray": false
            }
          },
          "name": "optData"
        },
        "comment": "Optimization data. In addition to those documented in LinearOptimizer, this method will register the following data: SolutionCallback PivotSelectionRule",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "doIteration(org.apache.commons.math3.optim.linear.SimplexTableau tableau)",
    "name": "doIteration",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexTableau",
          "name": "SimplexTableau",
          "isArray": false
        },
        "name": "tableau"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexTableau",
            "name": "SimplexTableau",
            "isArray": false
          },
          "name": "tableau"
        },
        "comment": "Simple tableau for the problem.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.TooManyIterationsException",
          "name": "TooManyIterationsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the allowed number of iterations has been exhausted.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.optim.linear.UnboundedSolutionException",
          "name": "UnboundedSolutionException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the model is found not to have a bounded solution.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "solvePhase1(org.apache.commons.math3.optim.linear.SimplexTableau tableau)",
    "name": "solvePhase1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexTableau",
          "name": "SimplexTableau",
          "isArray": false
        },
        "name": "tableau"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexTableau",
            "name": "SimplexTableau",
            "isArray": false
          },
          "name": "tableau"
        },
        "comment": "Simple tableau for the problem.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.TooManyIterationsException",
          "name": "TooManyIterationsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the allowed number of iterations has been exhausted.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.optim.linear.UnboundedSolutionException",
          "name": "UnboundedSolutionException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the model is found not to have a bounded solution.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.optim.linear.NoFeasibleSolutionException",
          "name": "NoFeasibleSolutionException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if there is no feasible solution?",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "doOptimize()",
    "name": "doOptimize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.linear.SimplexSolver",
      "name": "SimplexSolver",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.linear.SimplexSolver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.optim.PointValuePair",
      "name": "PointValuePair",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  }
]