[
  {
    "signature": "Tile(net.sf.freecol.common.model.Game game,net.sf.freecol.common.model.TileType type,int locX,int locY)",
    "name": "Tile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Game",
          "name": "Game",
          "isArray": false
        },
        "name": "game"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileType",
          "name": "TileType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "locX"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "locY"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Game",
            "name": "Game",
            "isArray": false
          },
          "name": "game"
        },
        "comment": "The enclosing Game.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileType",
            "name": "TileType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The TileType.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "locX"
        },
        "comment": "The x-position of this tile on the map.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "locY"
        },
        "comment": "The y-position of this tile on the map.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "Tile(net.sf.freecol.common.model.Game game,java.lang.String id)",
    "name": "Tile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Game",
          "name": "Game",
          "isArray": false
        },
        "name": "game"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Game",
            "name": "Game",
            "isArray": false
          },
          "name": "game"
        },
        "comment": "The enclosing Game.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "id"
        },
        "comment": "The object identifier.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getType()",
    "name": "getType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileType",
      "name": "TileType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The TileType.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "setType(net.sf.freecol.common.model.TileType t)",
    "name": "setType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileType",
          "name": "TileType",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileType",
            "name": "TileType",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "The new TileType for this Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isExplored()",
    "name": "isExplored",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is an explored Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isLand()",
    "name": "isLand",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this a land Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isForested()",
    "name": "isForested",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a forested Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getX()",
    "name": "getX",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The x-coordinate of this Tile.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getY())"
    },
    "throwsTags": []
  },
  {
    "signature": "getY()",
    "name": "getY",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The y-coordinate of this Tile.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getMap()",
    "name": "getMap",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Map",
      "name": "Map",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The enclosing Map.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getSettlement()",
    "name": "getSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Settlement",
      "name": "Settlement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The Settlement that is located on this Tile, or null if none is present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setSettlement(net.sf.freecol.common.model.Settlement settlement)",
    "name": "setSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Settlement",
          "name": "Settlement",
          "isArray": false
        },
        "name": "settlement"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Settlement",
            "name": "Settlement",
            "isArray": false
          },
          "name": "settlement"
        },
        "comment": "A Settlement to put on this Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "hasSettlement()",
    "name": "hasSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if there is a settlement present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getOwningSettlement()",
    "name": "getOwningSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Settlement",
      "name": "Settlement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The Settlement that owns this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setOwningSettlement(net.sf.freecol.common.model.Settlement owner)",
    "name": "setOwningSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Settlement",
          "name": "Settlement",
          "isArray": false
        },
        "name": "owner"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Settlement",
            "name": "Settlement",
            "isArray": false
          },
          "name": "owner"
        },
        "comment": "The Settlement to own this Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getTileItemContainer()",
    "name": "getTileItemContainer",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileItemContainer",
      "name": "TileItemContainer",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The TileItemContainer.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "setTileItemContainer(net.sf.freecol.common.model.TileItemContainer newTileItemContainer)",
    "name": "setTileItemContainer",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileItemContainer",
          "name": "TileItemContainer",
          "isArray": false
        },
        "name": "newTileItemContainer"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileItemContainer",
            "name": "TileItemContainer",
            "isArray": false
          },
          "name": "newTileItemContainer"
        },
        "comment": "The new TileItemContainer value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getRegion()",
    "name": "getRegion",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Region",
      "name": "Region",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The tile Region.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "setRegion(net.sf.freecol.common.model.Region newRegion)",
    "name": "setRegion",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Region",
          "name": "Region",
          "isArray": false
        },
        "name": "newRegion"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Region",
            "name": "Region",
            "isArray": false
          },
          "name": "newRegion"
        },
        "comment": "The new Region value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getDiscoverableRegion()",
    "name": "getDiscoverableRegion",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Region",
      "name": "Region",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "Any discoverable Region.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "isHighSeasConnected()",
    "name": "isHighSeasConnected",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this Tile is connected to the high seas.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getHighSeasCount()",
    "name": "getHighSeasCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The high seas count value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setHighSeasCount(int count)",
    "name": "setHighSeasCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "count"
        },
        "comment": "The new high seas count value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isCoastland()",
    "name": "isCoastland",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a coastland tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMoveToEurope()",
    "name": "getMoveToEurope",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Boolean",
      "name": "Boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The move-to-Europe state of the Tile.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "setMoveToEurope(java.lang.Boolean moveToEurope)",
    "name": "setMoveToEurope",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Boolean",
          "name": "Boolean",
          "isArray": false
        },
        "name": "moveToEurope"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Boolean",
            "name": "Boolean",
            "isArray": false
          },
          "name": "moveToEurope"
        },
        "comment": "The new move-to-Europe state for the Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isDirectlyHighSeasConnected()",
    "name": "isDirectlyHighSeasConnected",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if a unit can move to high seas from this tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isRiverCorner()",
    "name": "isRiverCorner",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a river corner.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStyle()",
    "name": "getStyle",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The Tile style.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "setStyle(int newStyle)",
    "name": "setStyle",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newStyle"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "newStyle"
        },
        "comment": "The new style value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getContiguity()",
    "name": "getContiguity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A contiguity number.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "setContiguity(int contiguity)",
    "name": "setContiguity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "contiguity"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "contiguity"
        },
        "comment": "A contiguity number.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isConnectedTo(net.sf.freecol.common.model.Tile other)",
    "name": "isConnectedTo",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "other"
        },
        "comment": "The other Tile to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the Tiles are connected.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getContiguityAdjacent(int contiguity)",
    "name": "getContiguityAdjacent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "contiguity"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "contiguity"
        },
        "comment": "The contiguity to search for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A set of Tiles with the required contiguity.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "isOnRiver()",
    "name": "isOnRiver",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if on a navigable river.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isBlocked(net.sf.freecol.common.model.Unit unit)",
    "name": "isBlocked",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The Unit to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the unit can not move to this tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTileImprovements()",
    "name": "getTileImprovements",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of all the TileImprovements.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getCompletedTileImprovements()",
    "name": "getCompletedTileImprovements",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of all completed TileImprovements.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasTileImprovement(net.sf.freecol.common.model.TileImprovementType type)",
    "name": "hasTileImprovement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
          "name": "TileImprovementType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
            "name": "TileImprovementType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The TileImprovementType to look for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if there is a completed improvement present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTileImprovement(net.sf.freecol.common.model.TileImprovementType type)",
    "name": "getTileImprovement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
          "name": "TileImprovementType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
            "name": "TileImprovementType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The TileImprovementType to look for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The TileImprovement of the requested type found, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasLostCityRumour()",
    "name": "hasLostCityRumour",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this Tile has a LostCityRumour on it.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLostCityRumour()",
    "name": "getLostCityRumour",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.LostCityRumour",
      "name": "LostCityRumour",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The LostCityRumour on this Tile, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasResource()",
    "name": "hasResource",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a resource Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasRiver()",
    "name": "hasRiver",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a river Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRiver()",
    "name": "getRiver",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A river TileImprovement, or null if none present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRiverStyle()",
    "name": "getRiverStyle",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovementStyle",
      "name": "TileImprovementStyle",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The river TileImprovementStyle.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasRoad()",
    "name": "hasRoad",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this Tile has a road.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRoad()",
    "name": "getRoad",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A road TileImprovement, or null if none present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addLostCityRumour(net.sf.freecol.common.model.LostCityRumour rumour)",
    "name": "addLostCityRumour",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.LostCityRumour",
          "name": "LostCityRumour",
          "isArray": false
        },
        "name": "rumour"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.LostCityRumour",
            "name": "LostCityRumour",
            "isArray": false
          },
          "name": "rumour"
        },
        "comment": "The LostCityRumour to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "removeLostCityRumour()",
    "name": "removeLostCityRumour",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.LostCityRumour",
      "name": "LostCityRumour",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The removed LostCityRumour.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addRiver(int magnitude,java.lang.String conns)",
    "name": "addRiver",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "magnitude"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "conns"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "magnitude"
        },
        "comment": "The magnitude of the river to be created",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "conns"
        },
        "comment": "The encoded river size/connections.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new river added, or null on failure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "removeRiver()",
    "name": "removeRiver",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The removed river.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "addRoad()",
    "name": "addRoad",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The new road added, or the existing one.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "removeRoad()",
    "name": "removeRoad",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The removed road.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getResource()",
    "name": "getResource",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Resource",
      "name": "Resource",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A Resource, or null if none present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addResource(net.sf.freecol.common.model.Resource resource)",
    "name": "addResource",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Resource",
          "name": "Resource",
          "isArray": false
        },
        "name": "resource"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Resource",
            "name": "Resource",
            "isArray": false
          },
          "name": "resource"
        },
        "comment": "The Resource to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "removeResource()",
    "name": "removeResource",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Resource",
      "name": "Resource",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The removed Resource.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkAmount(net.sf.freecol.common.model.TileImprovementType workType)",
    "name": "getWorkAmount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
          "name": "TileImprovementType",
          "isArray": false
        },
        "name": "workType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
            "name": "TileImprovementType",
            "isArray": false
          },
          "name": "workType"
        },
        "comment": "The TileImprovementType to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The number of turns it should take a non-expert pioneer to finish the work.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isImprovementTypeAllowed(net.sf.freecol.common.model.TileImprovementType type)",
    "name": "isImprovementTypeAllowed",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
          "name": "TileImprovementType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileImprovementType",
            "name": "TileImprovementType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The TileImprovementType to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if this tile can be improved with the improvement type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isImprovementAllowed(net.sf.freecol.common.model.TileImprovement tip)",
    "name": "isImprovementAllowed",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
          "name": "TileImprovement",
          "isArray": false
        },
        "name": "tip"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
            "name": "TileImprovement",
            "isArray": false
          },
          "name": "tip"
        },
        "comment": "The TileImprovement to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if this tile can be improved with the improvement.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDisasters()",
    "name": "getDisasters",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A weighted list of Disasters.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getLabel()",
    "name": "getLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The description label for this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSimpleLabel()",
    "name": "getSimpleLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A simple StringTemplate label.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDetailedLocationLabel()",
    "name": "getDetailedLocationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A suitable StringTemplate.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getDetailedLocationLabelFor(net.sf.freecol.common.model.Player player)",
    "name": "getDetailedLocationLabelFor",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player to produce a label for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A suitable StringTemplate.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getColonyTileLocationLabel(net.sf.freecol.common.model.Colony colony)",
    "name": "getColonyTileLocationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Colony",
          "name": "Colony",
          "isArray": false
        },
        "name": "colony"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Colony",
            "name": "Colony",
            "isArray": false
          },
          "name": "colony"
        },
        "comment": "The Colony assumed to own this tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A suitable StringTemplate, or null if this tile is not close enough to the colony to be a colony tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDistanceTo(net.sf.freecol.common.model.Tile tile)",
    "name": "getDistanceTo",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The Tile to check the distance to.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The distance.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getDirection(net.sf.freecol.common.model.Tile tile)",
    "name": "getDirection",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Direction",
      "name": "Direction",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The other Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The direction to the other Tile, or null if the other tile is not a neighbour.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNeighbourOrNull(net.sf.freecol.common.model.Direction direction)",
    "name": "getNeighbourOrNull",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Direction",
          "name": "Direction",
          "isArray": false
        },
        "name": "direction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Direction",
            "name": "Direction",
            "isArray": false
          },
          "name": "direction"
        },
        "comment": "The Direction to check in.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The neighbouring Tile in the given Direction, or null if none present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAdjacent(net.sf.freecol.common.model.Tile tile)",
    "name": "isAdjacent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "A potentially adjacent Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the Tile is adjacent to this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isPolar()",
    "name": "isPolar",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the Tile is polar.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isLandLocked()",
    "name": "isLandLocked",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if land locked.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isShore()",
    "name": "isShore",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this Tile is on the shore.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSurroundingTiles(int range)",
    "name": "getSurroundingTiles",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "range"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "range"
        },
        "comment": "How far away do we need to go starting from this.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The tiles surrounding this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSurroundingTiles(int rangeMin,int rangeMax)",
    "name": "getSurroundingTiles",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rangeMin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rangeMax"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "rangeMin"
        },
        "comment": "The inclusive minimum distance from this Tile.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "rangeMax"
        },
        "comment": "The inclusive maximum distance from this Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of the tiles surrounding this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasUnexploredAdjacent()",
    "name": "hasUnexploredAdjacent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if at least one neighbouring Tiles is unexplored.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAvailableAdjacentCount()",
    "name": "getAvailableAdjacentCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of adjacent available tiles.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getAdjacentColonies()",
    "name": "getAdjacentColonies",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of adjacent Colonys.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getNearestSettlement(net.sf.freecol.common.model.Player owner,int radius,boolean same)",
    "name": "getNearestSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Settlement",
      "name": "Settlement",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "owner"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radius"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "same"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "owner"
        },
        "comment": "If non-null, the settlement should be owned by this player.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "radius"
        },
        "comment": "The maximum radius of the search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "same"
        },
        "comment": "If true, require the settlement to be on the same land mass.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The nearest settlement, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSafeTile(net.sf.freecol.common.model.Player player,java.util.Random random)",
    "name": "getSafeTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      },
      {
        "type": {
          "qualifiedName": "java.util.Random",
          "name": "Random",
          "isArray": false
        },
        "name": "random"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The owner of the unit to place (may be null).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Random",
            "name": "Random",
            "isArray": false
          },
          "name": "random"
        },
        "comment": "An optional pseudo-random number source.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A vacant Tile near this one.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getDefenceValue()",
    "name": "getDefenceValue",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The defence value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDefenceBonusPercentage()",
    "name": "getDefenceBonusPercentage",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The percentage defence bonus.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getSafestSurroundingLandTiles(net.sf.freecol.common.model.Player player)",
    "name": "getSafestSurroundingLandTiles",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "A Player to use to check for tile access.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of land Tiles.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBestDisembarkTile(net.sf.freecol.common.model.Player player)",
    "name": "getBestDisembarkTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "A Player to use to check for tile access.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The most defensible adjacent land Tile.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "isDangerousToShip(net.sf.freecol.common.model.Unit ship)",
    "name": "isDangerousToShip",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "ship"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "ship"
        },
        "comment": "The naval Unit to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if moving the ship to this tile exposes it to attack.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSafeAnchoringTiles(net.sf.freecol.common.model.Unit unit)",
    "name": "getSafeAnchoringTiles",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The transport Unit that needs a anchoring site.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of suitable Tiles.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "changeType(net.sf.freecol.common.model.TileType type)",
    "name": "changeType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileType",
          "name": "TileType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileType",
            "name": "TileType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The new TileType.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isInUse()",
    "name": "isInUse",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if a Colony is using this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "changeOwningSettlement(net.sf.freecol.common.model.Settlement settlement)",
    "name": "changeOwningSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Settlement",
          "name": "Settlement",
          "isArray": false
        },
        "name": "settlement"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Settlement",
            "name": "Settlement",
            "isArray": false
          },
          "name": "settlement"
        },
        "comment": "The new owning Settlement for this Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "changeOwnership(net.sf.freecol.common.model.Player player,net.sf.freecol.common.model.Settlement settlement)",
    "name": "changeOwnership",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Settlement",
          "name": "Settlement",
          "isArray": false
        },
        "name": "settlement"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player to own the tile.",
        "kind": "PARAM",
        "condition": "args[0].owns(net.sf.freecol.common.model.Ownable)"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Settlement",
            "name": "Settlement",
            "isArray": false
          },
          "name": "settlement"
        },
        "comment": "The Settlement to own the Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getBuildColonyWarnings(net.sf.freecol.common.model.Unit unit)",
    "name": "getBuildColonyWarnings",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The Unit which is to build the colony.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A StringTemplate containing the warnings, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canProduce(net.sf.freecol.common.model.GoodsType goodsType,net.sf.freecol.common.model.UnitType unitType)",
    "name": "canProduce",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "An optional UnitType to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the tile can produce the goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBaseProduction(net.sf.freecol.common.model.ProductionType productionType,net.sf.freecol.common.model.GoodsType goodsType,net.sf.freecol.common.model.UnitType unitType)",
    "name": "getBaseProduction",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.ProductionType",
          "name": "ProductionType",
          "isArray": false
        },
        "name": "productionType"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.ProductionType",
            "name": "ProductionType",
            "isArray": false
          },
          "name": "productionType"
        },
        "comment": "An optional ProductionType to use, if null the best available one is used.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "An optional UnitType to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The base production due to tile type and resources.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getPotentialProduction(net.sf.freecol.common.model.GoodsType goodsType,net.sf.freecol.common.model.UnitType unitType)",
    "name": "getPotentialProduction",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check the potential for.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "An optional UnitType to do the work.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The potential production of this Tile to produce the given GoodsType.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getProductionModifiers(net.sf.freecol.common.model.GoodsType goodsType,net.sf.freecol.common.model.UnitType unitType)",
    "name": "getProductionModifiers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "An optional UnitType to do the work.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of production Modifiers.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMaximumPotential(net.sf.freecol.common.model.GoodsType goodsType,net.sf.freecol.common.model.UnitType unitType)",
    "name": "getMaximumPotential",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "A UnitType to do the work.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The maximum potential.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "getSortedPotential()",
    "name": "getSortedPotential",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of goods, highest potential production first.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSortedPotential(net.sf.freecol.common.model.Unit unit)",
    "name": "getSortedPotential",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "the Unit to work on this Tile",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of goods, highest potential production first.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSortedPotential(net.sf.freecol.common.model.UnitType unitType,net.sf.freecol.common.model.Player owner)",
    "name": "getSortedPotential",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "owner"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "The UnitType to do the work.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "owner"
        },
        "comment": "the Player owning the unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of goods, highest potential production first.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCachedTile(net.sf.freecol.common.model.Player player)",
    "name": "getCachedTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player who owns the view.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The view of this Tile.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "setCachedTile(net.sf.freecol.common.model.Player player,net.sf.freecol.common.model.Tile tile)",
    "name": "setCachedTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player who owns the view.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The view of the Tile (either this tile, or an uninterned copy of it).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "seeTile()",
    "name": "seeTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "seeTile(net.sf.freecol.common.model.Player player)",
    "name": "seeTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player who owns the view.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "cacheUnseen()",
    "name": "cacheUnseen",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getTileToCache()",
    "name": "getTileToCache",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "An uninterned copy of this Tile.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.getX())"
    },
    "throwsTags": []
  },
  {
    "signature": "cacheUnseen(net.sf.freecol.common.model.Player player)",
    "name": "cacheUnseen",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "A Player that currently may not be able to see the tile, but will as a result of the change, and so should not cache it.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "cacheUnseen(net.sf.freecol.common.model.Tile copied)",
    "name": "cacheUnseen",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "copied"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "copied"
        },
        "comment": "An optional Tile to cache.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "cacheUnseen(net.sf.freecol.common.model.Player player,net.sf.freecol.common.model.Tile copied)",
    "name": "cacheUnseen",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "copied"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "A Player that currently may not be able to see the tile, but will as a result of the change, and so should not cache it.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "copied"
        },
        "comment": "An optional Tile to cache.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "updateIndianSettlement(net.sf.freecol.common.model.Player player)",
    "name": "updateIndianSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "removeIndianSettlementInternals(net.sf.freecol.common.model.Player player)",
    "name": "removeIndianSettlementInternals",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLearnableSkill(net.sf.freecol.common.model.Player player)",
    "name": "getLearnableSkill",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.UnitType",
      "name": "UnitType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getWantedGoods(net.sf.freecol.common.model.Player player)",
    "name": "getWantedGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.GoodsType[]",
      "name": "GoodsType[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "net.sf.freecol.common.model.GoodsType",
        "name": "GoodsType",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "setIndianSettlementInternals(net.sf.freecol.common.model.Player player,net.sf.freecol.common.model.UnitType skill,net.sf.freecol.common.model.GoodsType[] wanted)",
    "name": "setIndianSettlementInternals",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "skill"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType[]",
          "name": "GoodsType[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          }
        },
        "name": "wanted"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player to pet belonged to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "skill"
        },
        "comment": "The skill taught by the settlement.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType[]",
            "name": "GoodsType[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "net.sf.freecol.common.model.GoodsType",
              "name": "GoodsType",
              "isArray": false
            }
          },
          "name": "wanted"
        },
        "comment": "The goods wanted by the settlement.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isExploredBy(net.sf.freecol.common.model.Player player)",
    "name": "isExploredBy",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if this Tile has been explored by the given Player.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setExplored(net.sf.freecol.common.model.Player player,boolean reveal)",
    "name": "setExplored",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "reveal"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player that is exploring.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "reveal"
        },
        "comment": "The exploration state.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getDefendingUnit(net.sf.freecol.common.model.Unit attacker)",
    "name": "getDefendingUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "attacker"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "attacker"
        },
        "comment": "The Unit that would be attacking this Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The Unit that has been chosen to defend this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getOccupyingUnit()",
    "name": "getOccupyingUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The Unit that is occupying this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isOccupied()",
    "name": "isOccupied",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if an enemy unit is occupying this Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTile()",
    "name": "getTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNearLocationLabel(net.sf.freecol.common.model.Direction direction,net.sf.freecol.common.model.StringTemplate location)",
    "name": "getNearLocationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Direction",
          "name": "Direction",
          "isArray": false
        },
        "name": "direction"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
          "name": "StringTemplate",
          "isArray": false
        },
        "name": "location"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Direction",
            "name": "Direction",
            "isArray": false
          },
          "name": "direction"
        },
        "comment": "The Direction from this tile to the nearby location.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
            "name": "StringTemplate",
            "isArray": false
          },
          "name": "location"
        },
        "comment": "A StringTemplate describing the location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A StringTemplate stating that the location is nearby.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLocationLabel()",
    "name": "getLocationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLocationLabelFor(net.sf.freecol.common.model.Player player)",
    "name": "getLocationLabelFor",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "add(net.sf.freecol.common.model.Locatable locatable)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "remove(net.sf.freecol.common.model.Locatable locatable)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "contains(net.sf.freecol.common.model.Locatable locatable)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "canAdd(net.sf.freecol.common.model.Locatable locatable)",
    "name": "canAdd",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "up()",
    "name": "up",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getRank()",
    "name": "getRank",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toShortString()",
    "name": "toShortString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNameKey()",
    "name": "getNameKey",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getOwner()",
    "name": "getOwner",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Player",
      "name": "Player",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "setOwner(net.sf.freecol.common.model.Player owner)",
    "name": "setOwner",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "owner"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "disposeResources()",
    "name": "disposeResources",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLinkTarget(net.sf.freecol.common.model.Player player)",
    "name": "getLinkTarget",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.FreeColGameObject",
      "name": "FreeColGameObject",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "checkIntegrity(boolean fix)",
    "name": "checkIntegrity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fix"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getAbilities(java.lang.String id,net.sf.freecol.common.model.FreeColGameObjectType fcgot,net.sf.freecol.common.model.Turn turn)",
    "name": "getAbilities",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.FreeColGameObjectType",
          "name": "FreeColGameObjectType",
          "isArray": false
        },
        "name": "fcgot"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Turn",
          "name": "Turn",
          "isArray": false
        },
        "name": "turn"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toXML(net.sf.freecol.common.io.FreeColXMLWriter xw,java.lang.String tag)",
    "name": "toXML",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "tag"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "internalToXML(net.sf.freecol.common.io.FreeColXMLWriter xw,java.lang.String tag)",
    "name": "internalToXML",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "tag"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
            "name": "FreeColXMLWriter",
            "isArray": false
          },
          "name": "xw"
        },
        "comment": "The FreeColXMLWriter to write to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "tag"
        },
        "comment": "The tag to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "javax.xml.stream.XMLStreamException",
          "name": "XMLStreamException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if there are any problems writing to the stream.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "writeAttributes(net.sf.freecol.common.io.FreeColXMLWriter xw)",
    "name": "writeAttributes",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "writeChildren(net.sf.freecol.common.io.FreeColXMLWriter xw)",
    "name": "writeChildren",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readAttributes(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readAttributes",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readChildren(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readChildren",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readChild(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readChild",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getXMLTagName()",
    "name": "getXMLTagName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getXMLElementTagName()",
    "name": "getXMLElementTagName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Tile",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "\"tile\".",
      "kind": "RETURN",
      "condition": "true ? result.equals(target)"
    },
    "throwsTags": []
  }
]