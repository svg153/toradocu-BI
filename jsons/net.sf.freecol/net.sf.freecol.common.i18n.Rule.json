[
  {
    "signature": "Rule(java.lang.String input)",
    "name": "Rule",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.i18n.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.i18n.Rule",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "add(java.util.List condition)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.i18n.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.i18n.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "condition"
        },
        "comment": "a list of relations combined with the \"and\" operator",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "matches(double number)",
    "name": "matches",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.i18n.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.i18n.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "number"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "number"
        },
        "comment": "The number to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the number matches this rule.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parse(java.lang.String input)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.i18n.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.i18n.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "a String value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.i18n.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.i18n.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  }
]