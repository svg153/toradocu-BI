[
  {
    "signature": "makeUnmodifiableSet(java.lang.Object[] members)",
    "name": "makeUnmodifiableSet",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "members"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "members"
        },
        "comment": "The set members.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "An unmodifiable set containing the members.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "makeUnmodifiableList(java.lang.Object[] members)",
    "name": "makeUnmodifiableList",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "members"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "members"
        },
        "comment": "The list members.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "An unmodifiable list containing the members.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "appendToMapList(java.util.Map map,java.lang.Object key,java.lang.Object value)",
    "name": "appendToMapList",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "map"
        },
        "comment": "The Map to add to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "key"
        },
        "comment": "The key with which to look up the list in the map.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "The value to append.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "accumulateToMap(java.util.Map map,java.lang.Object key,java.lang.Object value,java.util.function.BinaryOperator accumulator)",
    "name": "accumulateToMap",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BinaryOperator",
          "name": "BinaryOperator",
          "isArray": false
        },
        "name": "accumulator"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "accumulateMap(java.util.Map map1,java.util.Map map2,java.util.function.BinaryOperator accumulator)",
    "name": "accumulateMap",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map1"
      },
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map2"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BinaryOperator",
          "name": "BinaryOperator",
          "isArray": false
        },
        "name": "accumulator"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "incrementMapCount(java.util.Map map,java.lang.Object key)",
    "name": "incrementMapCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "map"
        },
        "comment": "The map to increment within.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "key"
        },
        "comment": "The key to increment the value for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new count associated with the key.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPermutations(java.util.List l)",
    "name": "getPermutations",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "l"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "l"
        },
        "comment": "The original list.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A iterable yielding all the permutations of the original list.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "allSame(java.util.Collection collection)",
    "name": "allSame",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "The Collection to examine.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if all members are the same.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "rotate(java.util.List list,int n)",
    "name": "rotate",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "list"
        },
        "comment": "The List to rotate.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "The number of places to rotate by (positive or negative).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(java.util.List list)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "list"
        },
        "comment": "The List to reverse.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "listEquals(java.util.List one,java.util.List two)",
    "name": "listEquals",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "one"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "two"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "one"
        },
        "comment": "First list to compare",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "two"
        },
        "comment": "Second list to compare",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the list contents are all either both null or equal in the sense of their equals() method.",
      "kind": "RETURN",
      "condition": "args[0]==null || args[1]==null || args[0].equals(args[1]) || args[1].equals(args[0]) ? result == true"
    },
    "throwsTags": []
  },
  {
    "signature": "mapEntriesByKey(java.util.Map map)",
    "name": "mapEntriesByKey",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "map"
        },
        "comment": "The Map to extract entries from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of entries from the map sorted by key.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mapEntriesByKey(java.util.Map map,java.util.Comparator comparator)",
    "name": "mapEntriesByKey",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "map"
        },
        "comment": "The Map to extract entries from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Comparator",
            "name": "Comparator",
            "isArray": false
          },
          "name": "comparator"
        },
        "comment": "A Comparator for the values.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of entries from the map sorted by key.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mapEntriesByValue(java.util.Map map)",
    "name": "mapEntriesByValue",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "map"
        },
        "comment": "The Map to extract entries from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of entries from the map sorted by key.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mapEntriesByValue(java.util.Map map,java.util.Comparator comparator)",
    "name": "mapEntriesByValue",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "map"
        },
        "comment": "The Map to extract entries from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Comparator",
            "name": "Comparator",
            "isArray": false
          },
          "name": "comparator"
        },
        "comment": "A Comparator for the values.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of entries from the map sorted by value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "all(java.lang.Object[] array,java.util.function.Predicate predicate)",
    "name": "all",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "any(java.lang.Object[] array,java.util.function.Predicate predicate)",
    "name": "any",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "none(java.lang.Object[] array,java.util.function.Predicate predicate)",
    "name": "none",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "all(java.util.Collection collection,java.util.function.Predicate predicate)",
    "name": "all",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "any(java.util.Collection collection,java.util.function.Predicate predicate)",
    "name": "any",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "none(java.util.Collection collection,java.util.function.Predicate predicate)",
    "name": "none",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "all(java.util.stream.Stream stream,java.util.function.Predicate predicate)",
    "name": "all",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.Stream",
          "name": "Stream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "any(java.util.stream.Stream stream,java.util.function.Predicate predicate)",
    "name": "any",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.Stream",
          "name": "Stream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "none(java.util.stream.Stream stream,java.util.function.Predicate predicate)",
    "name": "none",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.Stream",
          "name": "Stream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "contains(java.util.Collection collection,java.util.function.Predicate predicate)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "The Collection to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "A Predicate to test with.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the predicate ever succeeds.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "find(java.lang.Object[] array,java.util.function.Predicate predicate,java.lang.Object fail)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fail"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "The array to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "A Predicate to match with.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The item found, or fail if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "find(java.util.Collection collection,java.util.function.Predicate predicate)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "The Collection to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "A Predicate to match with.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The item found, or fail if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "find(java.util.Collection collection,java.util.function.Predicate predicate,java.lang.Object fail)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fail"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "The Collection to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "A Predicate to match with.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "fail"
        },
        "comment": "The value to return if nothing is found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The item found, or fail if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "find(java.util.stream.Stream stream,java.util.function.Predicate predicate)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.Stream",
          "name": "Stream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.stream.Stream",
            "name": "Stream",
            "isArray": false
          },
          "name": "stream"
        },
        "comment": "A Stream to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "A Predicate to match with.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The item found, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "find(java.util.stream.Stream stream,java.util.function.Predicate predicate,java.lang.Object fail)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.Stream",
          "name": "Stream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fail"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.stream.Stream",
            "name": "Stream",
            "isArray": false
          },
          "name": "stream"
        },
        "comment": "A Stream to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "A Predicate to match with.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "fail"
        },
        "comment": "The value to return if nothing is found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The item found, or fail if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "map(java.lang.Object[] array,java.util.function.Function mapper)",
    "name": "map",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream",
      "name": "Stream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "The array to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "mapper"
        },
        "comment": "A mapping Function to apply.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The resulting Stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "map(java.util.Collection collection,java.util.function.Function mapper)",
    "name": "map",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.CollectionUtils",
      "name": "CollectionUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.CollectionUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream",
      "name": "Stream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "The Collection to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.function.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "mapper"
        },
        "comment": "A mapping Function to apply.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The resulting Stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]