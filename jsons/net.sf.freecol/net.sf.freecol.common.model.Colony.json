[
  {
    "signature": "Colony(net.sf.freecol.common.model.Game game,net.sf.freecol.common.model.Player owner,java.lang.String name,net.sf.freecol.common.model.Tile tile)",
    "name": "Colony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Game",
          "name": "Game",
          "isArray": false
        },
        "name": "game"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "owner"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Game",
            "name": "Game",
            "isArray": false
          },
          "name": "game"
        },
        "comment": "The enclosing Game.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "owner"
        },
        "comment": "The Player owning this Colony.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "The name of the new Colony.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The containing Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "Colony(net.sf.freecol.common.model.Game game,java.lang.String id)",
    "name": "Colony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Game",
          "name": "Game",
          "isArray": false
        },
        "name": "game"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Game",
            "name": "Game",
            "isArray": false
          },
          "name": "game"
        },
        "comment": "The enclosing Game.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "id"
        },
        "comment": "The object identifier.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getBuildings()",
    "name": "getBuildings",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of Buildings.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBuilding(net.sf.freecol.common.model.BuildingType type)",
    "name": "getBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Building",
      "name": "Building",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildingType",
          "name": "BuildingType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildingType",
            "name": "BuildingType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The type of the building to get.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The Building found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getColonyTiles()",
    "name": "getColonyTiles",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of ColonyTiles.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getColonyTile(net.sf.freecol.common.model.Tile t)",
    "name": "getColonyTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.ColonyTile",
      "name": "ColonyTile",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "The Tile to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The corresponding ColonyTile, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getExportData(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getExportData",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.ExportData",
      "name": "ExportData",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The required ExportData.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setExportData(net.sf.freecol.common.model.ExportData newExportData)",
    "name": "setExportData",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.ExportData",
          "name": "ExportData",
          "isArray": false
        },
        "name": "newExportData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.ExportData",
            "name": "ExportData",
            "isArray": false
          },
          "name": "newExportData"
        },
        "comment": "A new ExportData value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getLiberty()",
    "name": "getLiberty",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current liberty.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getProductionBonus()",
    "name": "getProductionBonus",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current production bonus of the colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getImmigration()",
    "name": "getImmigration",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current immigration.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modifyImmigration(int amount)",
    "name": "modifyImmigration",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "amount"
        },
        "comment": "An amount of immigration.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getEstablished()",
    "name": "getEstablished",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Turn",
      "name": "Turn",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The establishment Turn.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setEstablished(net.sf.freecol.common.model.Turn newEstablished)",
    "name": "setEstablished",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Turn",
          "name": "Turn",
          "isArray": false
        },
        "name": "newEstablished"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Turn",
            "name": "Turn",
            "isArray": false
          },
          "name": "newEstablished"
        },
        "comment": "The new Turn of establishment.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getBuildQueue()",
    "name": "getBuildQueue",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of Buildables.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setBuildQueue(java.util.List newBuildQueue)",
    "name": "setBuildQueue",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "newBuildQueue"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "newBuildQueue"
        },
        "comment": "A list of new values for the build queue.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getOccupationTrace()",
    "name": "getOccupationTrace",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The occupation tracing status.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setOccupationTrace(boolean trace)",
    "name": "setOccupationTrace",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "trace"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "trace"
        },
        "comment": "The new occupation tracing status.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The original occupation tracing status.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkTypeChoices(net.sf.freecol.common.model.Unit unit,boolean userMode)",
    "name": "getWorkTypeChoices",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "userMode"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The Unit to check.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "userMode"
        },
        "comment": "If a user requested this, favour the current work type, if not favour goods that the unit requires.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The list of collections of GoodsTypes.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAllWorkLocations()",
    "name": "getAllWorkLocations",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The list of work locations.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAvailableWorkLocations()",
    "name": "getAvailableWorkLocations",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The list of available WorkLocations.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCurrentWorkLocations()",
    "name": "getCurrentWorkLocations",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The list of current WorkLocations.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addBuilding(net.sf.freecol.common.model.Building building)",
    "name": "addBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Building",
          "name": "Building",
          "isArray": false
        },
        "name": "building"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Building",
            "name": "Building",
            "isArray": false
          },
          "name": "building"
        },
        "comment": "The Building to build.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the building was added.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "removeBuilding(net.sf.freecol.common.model.Building building)",
    "name": "removeBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Building",
          "name": "Building",
          "isArray": false
        },
        "name": "building"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Building",
            "name": "Building",
            "isArray": false
          },
          "name": "building"
        },
        "comment": "The Building to remove.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the building was removed.",
      "kind": "RETURN",
      "condition": "args[0].remove(net.sf.freecol.common.model.Locatable) ? result == true"
    },
    "throwsTags": []
  },
  {
    "signature": "getBuildingForProducing(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getBuildingForProducing",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Building",
      "name": "Building",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A Building which produces the given type of goods, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationWithAbility(java.lang.String ability)",
    "name": "getWorkLocationWithAbility",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
      "name": "WorkLocation",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "ability"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "ability"
        },
        "comment": "An ability key.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A WorkLocation with the required Ability, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationWithAbility(java.lang.String ability,java.lang.Class returnClass)",
    "name": "getWorkLocationWithAbility",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "ability"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "returnClass"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "ability"
        },
        "comment": "An ability key.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "returnClass"
        },
        "comment": "The expected subclass.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A WorkLocation with the required Ability, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationWithModifier(java.lang.String modifier)",
    "name": "getWorkLocationWithModifier",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
      "name": "WorkLocation",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "modifier"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "modifier"
        },
        "comment": "A modifier key.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A WorkLocation with the required Modifier, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationWithModifier(java.lang.String modifier,java.lang.Class returnClass)",
    "name": "getWorkLocationWithModifier",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "modifier"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "returnClass"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "modifier"
        },
        "comment": "A modifier key.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "returnClass"
        },
        "comment": "The expected subclass.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A WorkLocation with the required Modifier, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationsForConsuming(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getWorkLocationsForConsuming",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to consume.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of WorkLocations which consume the given type of goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationsForProducing(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getWorkLocationsForProducing",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of WorkLocations which produce the given type of goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationForProducing(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getWorkLocationForProducing",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
      "name": "WorkLocation",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A WorkLocations which produces the given type of goods, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationFor(net.sf.freecol.common.model.Unit unit,net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getWorkLocationFor",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
      "name": "WorkLocation",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The Unit to get the building for.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The best WorkLocation found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocationFor(net.sf.freecol.common.model.Unit unit)",
    "name": "getWorkLocationFor",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
      "name": "WorkLocation",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The Unit to check for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The best WorkLocation found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isTileInUse(net.sf.freecol.common.model.Tile tile)",
    "name": "isTileInUse",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The Tile to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if this tile is actively in use by this colony.",
      "kind": "RETURN",
      "condition": "args[0].isInUse() ? result == true"
    },
    "throwsTags": []
  },
  {
    "signature": "getWarehouse()",
    "name": "getWarehouse",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Building",
      "name": "Building",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The warehouse Building.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasStockade()",
    "name": "hasStockade",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the colony has a stockade.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStockade()",
    "name": "getStockade",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Building",
      "name": "Building",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The stockade Building.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStockadeKey()",
    "name": "getStockadeKey",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The stockade key, or null if no stockade-building is present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDisasters()",
    "name": "getDisasters",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A weighted list of Disasters.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAutomaticBuild(net.sf.freecol.common.model.BuildingType buildingType)",
    "name": "isAutomaticBuild",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildingType",
          "name": "BuildingType",
          "isArray": false
        },
        "name": "buildingType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildingType",
            "name": "BuildingType",
            "isArray": false
          },
          "name": "buildingType"
        },
        "comment": "a BuildingType value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the building is available at zero cost.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBuildableUnits()",
    "name": "getBuildableUnits",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of buildable UnitTypes.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTurnsToComplete(net.sf.freecol.common.model.BuildableType buildable)",
    "name": "getTurnsToComplete",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildable"
        },
        "comment": "The BuildableType to build.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The number of turns to build the buildable, negative if some goods are not being built, UNDEFINED if none is.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTurnsToComplete(net.sf.freecol.common.model.BuildableType buildable,net.sf.freecol.common.model.AbstractGoods needed)",
    "name": "getTurnsToComplete",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildable"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.AbstractGoods",
          "name": "AbstractGoods",
          "isArray": false
        },
        "name": "needed"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildable"
        },
        "comment": "The BuildableType to build.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.AbstractGoods",
            "name": "AbstractGoods",
            "isArray": false
          },
          "name": "needed"
        },
        "comment": "The AbstractGoods needed to continue the build.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The number of turns to build the buildable (which may be zero, UNDEFINED if no useful work is being done, negative if some requirement is or will block completion (value is the negation of (turns-to-blockage + 1), and if the needed argument is supplied it is set to the goods deficit).",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canBreed(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "canBreed",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "a GoodsType value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a boolean value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCurrentlyBuilding()",
    "name": "getCurrentlyBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.BuildableType",
      "name": "BuildableType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The type of building currently being built.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setCurrentlyBuilding(net.sf.freecol.common.model.BuildableType buildable)",
    "name": "setCurrentlyBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildable"
        },
        "comment": "The BuildableType to build.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "canBuild()",
    "name": "canBuild",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "canBuild(net.sf.freecol.common.model.BuildableType buildableType)",
    "name": "canBuild",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildableType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildableType"
        },
        "comment": "a BuildableType value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a boolean value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNoBuildReason(net.sf.freecol.common.model.BuildableType buildableType,java.util.List assumeBuilt)",
    "name": "getNoBuildReason",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Colony.NoBuildReason",
      "name": "NoBuildReason",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildableType"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "assumeBuilt"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildableType"
        },
        "comment": "A BuildableType to build.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "assumeBuilt"
        },
        "comment": "An optional list of other buildable types which can be assumed to be built, for the benefit of build queue checks.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A NoBuildReason value decribing the failure, including NoBuildReason.NONE on success.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPriceForBuilding()",
    "name": "getPriceForBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The price.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPriceForBuilding(net.sf.freecol.common.model.BuildableType type)",
    "name": "getPriceForBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The BuildableType to build.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The price.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "priceGoodsForBuilding(java.util.List required)",
    "name": "priceGoodsForBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "required"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "required"
        },
        "comment": "A list of required AbstractGoods.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The price.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRequiredGoods(net.sf.freecol.common.model.BuildableType type)",
    "name": "getRequiredGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The BuildableType to build.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The map to completion.",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.up())"
    },
    "throwsTags": []
  },
  {
    "signature": "getFullRequiredGoods(net.sf.freecol.common.model.BuildableType buildable)",
    "name": "getFullRequiredGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildable"
        },
        "comment": "The BuildableType to consider.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of required abstract goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canPayToFinishBuilding()",
    "name": "canPayToFinishBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [
          "Colony"
        ],
        "comment": "If the owner of this Colony has an insufficient amount of gold.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "canPayToFinishBuilding(net.sf.freecol.common.model.BuildableType buildableType)",
    "name": "canPayToFinishBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildableType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildableType"
        },
        "comment": "a BuildableType value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a boolean value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [
          "Colony"
        ],
        "comment": "If the owner of this Colony has an insufficient amount of gold.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "addLiberty(int amount)",
    "name": "addLiberty",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "amount"
        },
        "comment": "The number of liberty to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "modifyLiberty(int amount)",
    "name": "modifyLiberty",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "amount"
        },
        "comment": "An amount of liberty.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "updateSoL()",
    "name": "updateSoL",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getSoLPercentage()",
    "name": "getSoLPercentage",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The percentage of SoLs, negative if not calculable.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "calculateRebels(int uc,int solPercent)",
    "name": "calculateRebels",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "uc"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "solPercent"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "uc"
        },
        "comment": "The number of units in the colony.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "solPercent"
        },
        "comment": "The percentage of SoLs.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getTory()",
    "name": "getTory",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current Tory membership of the colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "updateProductionBonus()",
    "name": "updateProductionBonus",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the bonus changed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPreferredSizeChange()",
    "name": "getPreferredSizeChange",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of units to add to the colony, or if negative the negation of the number of units to remove.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "joinColony(net.sf.freecol.common.model.Unit unit)",
    "name": "joinColony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The Unit to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the add succeeds.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canReducePopulation()",
    "name": "canReducePopulation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the population can be reduced.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getReducePopulationMessage()",
    "name": "getReducePopulationMessage",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A StringTemplate describing why a colony can not reduce its population, or null if it can.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getUnbuildableMessage(net.sf.freecol.common.model.BuildableType buildable)",
    "name": "getUnbuildableMessage",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.ModelMessage",
      "name": "ModelMessage",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "buildable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "buildable"
        },
        "comment": "The BuildableType that can not be built.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A ModelMessage describing the build failure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "governmentChange(int unitCount)",
    "name": "governmentChange",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "unitCount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "unitCount"
        },
        "comment": "The proposed population for the colony.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "1, 0 or -1.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "checkForGovMgtChangeMessage()",
    "name": "checkForGovMgtChangeMessage",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.ModelMessage",
      "name": "ModelMessage",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "updatePopulation()",
    "name": "updatePopulation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "updateEducation(net.sf.freecol.common.model.Unit unit,boolean enable)",
    "name": "updateEducation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "enable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The Unit that is changing its education state.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "enable"
        },
        "comment": "If true, check for new education opportunities, otherwise clear existing ones.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isUndead()",
    "name": "isUndead",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this colony has undead units.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDisplayUnitCount()",
    "name": "getDisplayUnitCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The apparent number of Units at this colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setDisplayUnitCount(int count)",
    "name": "setDisplayUnitCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "count"
        },
        "comment": "The new apparent number of Units at this colony.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getBestDefenderType()",
    "name": "getBestDefenderType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.UnitType",
      "name": "UnitType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The best available defender type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTotalDefencePower()",
    "name": "getTotalDefencePower",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The total defence power.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canBePillaged(net.sf.freecol.common.model.Unit attacker)",
    "name": "canBePillaged",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "attacker"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "attacker"
        },
        "comment": "The Unit that has defeated the defender.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the attacker can pillage this colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canBePlundered()",
    "name": "canBePlundered",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if at least one piece of gold can be plundered from this colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBurnableBuildings()",
    "name": "getBurnableBuildings",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of burnable buildings.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLootableGoodsList()",
    "name": "getLootableGoodsList",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of lootable goods in this colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isUnderSiege()",
    "name": "isUnderSiege",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a boolean value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "evaluateFor(net.sf.freecol.common.model.Player player)",
    "name": "evaluateFor",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player to evaluate for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A value for the player.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canTrain(net.sf.freecol.common.model.Unit unit)",
    "name": "canTrain",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "The unit to add as a teacher.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this unit type could be added.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canTrain(net.sf.freecol.common.model.UnitType unitType)",
    "name": "canTrain",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "The unit type to add as a teacher.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this unit type could be added.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTeachers()",
    "name": "getTeachers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of teacher Units.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findTeacher(net.sf.freecol.common.model.Unit student)",
    "name": "findTeacher",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "student"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "student"
        },
        "comment": "The student Unit that needs a teacher.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A potential teacher, or null of none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findStudent(net.sf.freecol.common.model.Unit teacher)",
    "name": "findStudent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "teacher"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "teacher"
        },
        "comment": "The teacher Unit that needs a student.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A potential student, or null of none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isProducing(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "isProducing",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if goods type is produced.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isConsuming(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "isConsuming",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if goods type is consumed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getConsumers()",
    "name": "getConsumers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a list of consumers",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getConsumptionOf(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getConsumptionOf",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "GoodsType values",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an int value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getFoodProduction()",
    "name": "getFoodProduction",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "an int value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStarvationTurns()",
    "name": "getStarvationTurns",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of turns before starvation occurs, or negative if it will not.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNewColonistTurns()",
    "name": "getNewColonistTurns",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A number of turns, or negative if no colonist will be born.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getProductionModifiers(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getProductionModifiers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of suitable Modifiers.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNetProductionOf(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getNetProductionOf",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "a GoodsType value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an int value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isProductive(net.sf.freecol.common.model.WorkLocation workLocation)",
    "name": "isProductive",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
          "name": "WorkLocation",
          "isArray": false
        },
        "name": "workLocation"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
            "name": "WorkLocation",
            "isArray": false
          },
          "name": "workLocation"
        },
        "comment": "The WorkLocation to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if something is being produced at the WorkLocation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAdjustedNetProductionOf(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getAdjustedNetProductionOf",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "a GoodsType value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an int value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getProductionMap()",
    "name": "getProductionMap",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TypeCountMap",
      "name": "TypeCountMap",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A copy of the current production map.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getProductionInfo(java.lang.Object object)",
    "name": "getProductionInfo",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.ProductionInfo",
      "name": "ProductionInfo",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "an Object value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a ProductionInfo value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "invalidateCache()",
    "name": "invalidateCache",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "canProduce(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "canProduce",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check production of.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the goods can be produced.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTileImprovementSuggestions()",
    "name": "getTileImprovementSuggestions",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of TileImprovementSuggestions.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBetterExpert(net.sf.freecol.common.model.Unit expert)",
    "name": "getBetterExpert",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "expert"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "expert"
        },
        "comment": "The Unit to consider.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A better expert, or null if none available.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getProductionWarnings(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getProductionWarnings",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A collection of warning messages.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "goodsUseful(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "goodsUseful",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "copyColony()",
    "name": "copyColony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A scratch version of this colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCorresponding(net.sf.freecol.common.model.FreeColObject fco)",
    "name": "getCorresponding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.FreeColObject",
          "name": "FreeColObject",
          "isArray": false
        },
        "name": "fco"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.FreeColObject",
            "name": "FreeColObject",
            "isArray": false
          },
          "name": "fco"
        },
        "comment": "The FreeColObject in the other colony.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The corresponding FreeColObject in this colony, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAbilities(java.lang.String id,net.sf.freecol.common.model.FreeColGameObjectType type,net.sf.freecol.common.model.Turn turn)",
    "name": "getAbilities",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.FreeColGameObjectType",
          "name": "FreeColGameObjectType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Turn",
          "name": "Turn",
          "isArray": false
        },
        "name": "turn"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getDisposeList()",
    "name": "getDisposeList",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLocationLabelFor(net.sf.freecol.common.model.Player player)",
    "name": "getLocationLabelFor",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "add(net.sf.freecol.common.model.Locatable locatable)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "remove(net.sf.freecol.common.model.Locatable locatable)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "contains(net.sf.freecol.common.model.Locatable locatable)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getUnitCount()",
    "name": "getUnitCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getUnitList()",
    "name": "getUnitList",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "up()",
    "name": "up",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toShortString()",
    "name": "toShortString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getGoodsCapacity()",
    "name": "getGoodsCapacity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addGoods(net.sf.freecol.common.model.GoodsType type,int amount)",
    "name": "addGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "removeGoods(net.sf.freecol.common.model.GoodsType type,int amount)",
    "name": "removeGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Goods",
      "name": "Goods",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getImageKey()",
    "name": "getImageKey",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getDefendingUnit(net.sf.freecol.common.model.Unit attacker)",
    "name": "getDefendingUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "attacker"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getDefenceRatio()",
    "name": "getDefenceRatio",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isBadlyDefended()",
    "name": "isBadlyDefended",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getPlunderRange(net.sf.freecol.common.model.Unit attacker)",
    "name": "getPlunderRange",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.RandomRange",
      "name": "RandomRange",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "attacker"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getSoL()",
    "name": "getSoL",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getUpkeep()",
    "name": "getUpkeep",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getTotalProductionOf(net.sf.freecol.common.model.GoodsType goodsType)",
    "name": "getTotalProductionOf",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "canProvideGoods(java.util.List requiredGoods)",
    "name": "canProvideGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "requiredGoods"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "hasContacted(net.sf.freecol.common.model.Player player)",
    "name": "hasContacted",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getAlarmLevelLabel(net.sf.freecol.common.model.Player player)",
    "name": "getAlarmLevelLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getExportAmount(net.sf.freecol.common.model.GoodsType goodsType,int turns)",
    "name": "getExportAmount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "turns"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getImportAmount(net.sf.freecol.common.model.GoodsType goodsType,int turns)",
    "name": "getImportAmount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "turns"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addPortAbility()",
    "name": "addPortAbility",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "checkBuildQueueIntegrity(boolean fix)",
    "name": "checkBuildQueueIntegrity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fix"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "fix"
        },
        "comment": "Fix problems if possible.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Negative if there are problems remaining, zero if problems were fixed, positive if no problems found at all.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "checkIntegrity(boolean fix)",
    "name": "checkIntegrity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fix"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "writeAttributes(net.sf.freecol.common.io.FreeColXMLWriter xw)",
    "name": "writeAttributes",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "writeChildren(net.sf.freecol.common.io.FreeColXMLWriter xw)",
    "name": "writeChildren",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readAttributes(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readAttributes",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readChildren(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readChildren",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readChild(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readChild",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getXMLTagName()",
    "name": "getXMLTagName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getXMLElementTagName()",
    "name": "getXMLElementTagName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Colony",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "\"colony\".",
      "kind": "RETURN",
      "condition": "true ? result.equals(target)"
    },
    "throwsTags": []
  }
]