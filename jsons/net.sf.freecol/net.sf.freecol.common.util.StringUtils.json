[
  {
    "signature": "join(java.lang.String delimiter,java.lang.String[] strings)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delimiter"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String[]",
          "name": "String[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          }
        },
        "name": "strings"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "delimiter"
        },
        "comment": "The delimiter to place between the individual strings.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String[]",
            "name": "String[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.String",
              "name": "String",
              "isArray": false
            }
          },
          "name": "strings"
        },
        "comment": "The strings to be joined.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Each of the strings in the given array delimited by the given string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "join(java.lang.String delimiter,java.util.List strings)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delimiter"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "strings"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "delimiter"
        },
        "comment": "The delimiter to place between the individual strings.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "strings"
        },
        "comment": "The strings to be joined.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Each of the strings in the given array delimited by the given string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "chop(java.lang.String str,int maxLength)",
    "name": "chop",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxLength"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "The string to chop.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxLength"
        },
        "comment": "The maximum length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A string not exceeding maxLength.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastPart(java.lang.String s,java.lang.String delim)",
    "name": "lastPart",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delim"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "s"
        },
        "comment": "The string to operate on.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "delim"
        },
        "comment": "The delimiter.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The last part of the string after the last instance of the delimiter, or the original string if the delimiter is not present.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEnumKey(java.lang.Enum value)",
    "name": "getEnumKey",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Enum",
          "name": "Enum",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Enum",
            "name": "Enum",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "The enum value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A suitable key.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBreakingPoint(java.lang.String string)",
    "name": "getBreakingPoint",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "The line for which we should determine a breaking point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The best breaking point or negative if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBreakingPoint(java.lang.String string,java.lang.String delim)",
    "name": "getBreakingPoint",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delim"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "The line for which we should determine a breaking point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "delim"
        },
        "comment": "Characters to consider as word delimiting.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The best breaking point or negative if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "splitText(java.lang.String text,java.lang.String delim,java.awt.FontMetrics fontMetrics,int width)",
    "name": "splitText",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.util.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.util.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delim"
      },
      {
        "type": {
          "qualifiedName": "java.awt.FontMetrics",
          "name": "FontMetrics",
          "isArray": false
        },
        "name": "fontMetrics"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "width"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "The text to split.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "delim"
        },
        "comment": "Characters to consider as word delimiting.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.awt.FontMetrics",
            "name": "FontMetrics",
            "isArray": false
          },
          "name": "fontMetrics"
        },
        "comment": "FontMetrics used to calculate text width.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "width"
        },
        "comment": "The text width maximum.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of split text.",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[3])"
    },
    "throwsTags": []
  }
]