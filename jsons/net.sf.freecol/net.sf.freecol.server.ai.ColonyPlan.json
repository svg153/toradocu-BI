[
  {
    "signature": "ColonyPlan(net.sf.freecol.server.ai.AIMain aiMain,net.sf.freecol.common.model.Colony colony)",
    "name": "ColonyPlan",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.server.ai.AIMain",
          "name": "AIMain",
          "isArray": false
        },
        "name": "aiMain"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Colony",
          "name": "Colony",
          "isArray": false
        },
        "name": "colony"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.server.ai.AIMain",
            "name": "AIMain",
            "isArray": false
          },
          "name": "aiMain"
        },
        "comment": "The main AI-object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Colony",
            "name": "Colony",
            "isArray": false
          },
          "name": "colony"
        },
        "comment": "The colony to make a ColonyPlan for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getPreferredProduction()",
    "name": "getPreferredProduction",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A copy of the preferred goods production list in this plan.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBuildableTypes()",
    "name": "getBuildableTypes",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A copy of the of BuildableTypes list.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBestBuildableType()",
    "name": "getBestBuildableType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.BuildableType",
      "name": "BuildableType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The best current BuildableType.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBuildableReport()",
    "name": "getBuildableReport",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A build plan report.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getFoodPlans()",
    "name": "getFoodPlans",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of food producing plans.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkPlans()",
    "name": "getWorkPlans",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of non-food producing plans.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "refine(net.sf.freecol.common.model.BuildableType build,net.sf.freecol.common.util.LogBuilder lb)",
    "name": "refine",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.BuildableType",
          "name": "BuildableType",
          "isArray": false
        },
        "name": "build"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.util.LogBuilder",
          "name": "LogBuilder",
          "isArray": false
        },
        "name": "lb"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.BuildableType",
            "name": "BuildableType",
            "isArray": false
          },
          "name": "build"
        },
        "comment": "The BuildableType to be built (may be null).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.util.LogBuilder",
            "name": "LogBuilder",
            "isArray": false
          },
          "name": "lb"
        },
        "comment": "A LogBuilder to log to.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "update()",
    "name": "update",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getBestWorker(net.sf.freecol.common.model.WorkLocation wl,net.sf.freecol.common.model.GoodsType goodsType,java.util.List workers)",
    "name": "getBestWorker",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
          "name": "WorkLocation",
          "isArray": false
        },
        "name": "wl"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "goodsType"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "workers"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
            "name": "WorkLocation",
            "isArray": false
          },
          "name": "wl"
        },
        "comment": "The WorkLocation to work at.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "goodsType"
        },
        "comment": "The GoodsType to make.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "workers"
        },
        "comment": "A list of potential Units to try.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The best worker for the job.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "assignWorkers(java.util.List workers,boolean preferScout,net.sf.freecol.common.util.LogBuilder lb)",
    "name": "assignWorkers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "workers"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "preferScout"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.util.LogBuilder",
          "name": "LogBuilder",
          "isArray": false
        },
        "name": "lb"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "workers"
        },
        "comment": "A list of Units to assign.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "preferScout"
        },
        "comment": "Prefer to make scouts rather than soldiers.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.util.LogBuilder",
            "name": "LogBuilder",
            "isArray": false
          },
          "name": "lb"
        },
        "comment": "A LogBuilder to log to.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A scratch colony with the workers in place.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.server.ai.ColonyPlan",
      "name": "ColonyPlan",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.server.ai.ColonyPlan",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  }
]