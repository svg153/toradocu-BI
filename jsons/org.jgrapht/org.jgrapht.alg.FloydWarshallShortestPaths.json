[
  {
    "signature": "FloydWarshallShortestPaths(org.jgrapht.Graph graph)",
    "name": "FloydWarshallShortestPaths",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jgrapht.Graph",
          "name": "Graph",
          "isArray": false
        },
        "name": "graph"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getGraph()",
    "name": "getGraph",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.Graph",
      "name": "Graph",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the graph on which this algorithm operates",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortestPathsCount()",
    "name": "getShortestPathsCount",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "total number of shortest paths",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "shortestDistance(java.lang.Object a,java.lang.Object b)",
    "name": "shortestDistance",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "first vertex",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "second vertex",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "shortest distance between a and b",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": []
  },
  {
    "signature": "getDiameter()",
    "name": "getDiameter",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the diameter (longest of all the shortest paths) computed for the graph. If the graph is vertexless, return 0.0.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortestPath(java.lang.Object a,java.lang.Object b)",
    "name": "getShortestPath",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.GraphPath",
      "name": "GraphPath",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "From vertice",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "To vertice",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the path, or null if none found",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortestPathAsVertexList(java.lang.Object a,java.lang.Object b)",
    "name": "getShortestPathAsVertexList",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getShortestPaths(java.lang.Object v)",
    "name": "getShortestPaths",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "v"
        },
        "comment": "the originating vertex",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "List of paths",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortestPaths()",
    "name": "getShortestPaths",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.FloydWarshallShortestPaths",
      "name": "FloydWarshallShortestPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.FloydWarshallShortestPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "List of paths",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]