[
  {
    "signature": "NaiveLcaFinder(org.jgrapht.DirectedGraph graph)",
    "name": "NaiveLcaFinder",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.NaiveLcaFinder",
      "name": "NaiveLcaFinder",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.NaiveLcaFinder",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jgrapht.DirectedGraph",
          "name": "DirectedGraph",
          "isArray": false
        },
        "name": "graph"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "findLca(java.lang.Object a,java.lang.Object b)",
    "name": "findLca",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.NaiveLcaFinder",
      "name": "NaiveLcaFinder",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.NaiveLcaFinder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first element to find LCA for",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the other element to find the LCA for",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the first found LCA of a and b, or null if there is no LCA.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findLcas(java.lang.Object a,java.lang.Object b)",
    "name": "findLcas",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.NaiveLcaFinder",
      "name": "NaiveLcaFinder",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.NaiveLcaFinder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first element to find LCA for",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the other element to find the LCA for",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the set of all LCA of a and b, or empty set if there is no LCA.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]