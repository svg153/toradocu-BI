[
  {
    "signature": "AllDirectedPaths(org.jgrapht.DirectedGraph graph)",
    "name": "AllDirectedPaths",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.AllDirectedPaths",
      "name": "AllDirectedPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.AllDirectedPaths",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jgrapht.DirectedGraph",
          "name": "DirectedGraph",
          "isArray": false
        },
        "name": "graph"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getAllPaths(java.lang.Object sourceVertex,java.lang.Object targetVertex,boolean simplePathsOnly,java.lang.Integer maxPathLength)",
    "name": "getAllPaths",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.AllDirectedPaths",
      "name": "AllDirectedPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.AllDirectedPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "simplePathsOnly"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Integer",
          "name": "Integer",
          "isArray": false
        },
        "name": "maxPathLength"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "the source vertex",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "the target vertex",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "simplePathsOnly"
        },
        "comment": "if true, only search simple (non-self-intersecting) paths",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Integer",
            "name": "Integer",
            "isArray": false
          },
          "name": "maxPathLength"
        },
        "comment": "maximum number of edges to allow in a path (if null, all paths are considered, which may be very slow due to potentially huge output)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getAllPaths(java.util.Set sourceVertices,java.util.Set targetVertices,boolean simplePathsOnly,java.lang.Integer maxPathLength)",
    "name": "getAllPaths",
    "containingClass": {
      "qualifiedName": "org.jgrapht.alg.AllDirectedPaths",
      "name": "AllDirectedPaths",
      "isArray": false
    },
    "targetClass": "org.jgrapht.alg.AllDirectedPaths",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "sourceVertices"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "targetVertices"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "simplePathsOnly"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Integer",
          "name": "Integer",
          "isArray": false
        },
        "name": "maxPathLength"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          },
          "name": "sourceVertices"
        },
        "comment": "the source vertices",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          },
          "name": "targetVertices"
        },
        "comment": "the target vertices",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "simplePathsOnly"
        },
        "comment": "if true, only search simple (non-self-intersecting) paths",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Integer",
            "name": "Integer",
            "isArray": false
          },
          "name": "maxPathLength"
        },
        "comment": "maximum number of edges to allow in a path (if null, all paths are considered, which may be very slow due to potentially huge output)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "list of all paths from the sources to the targets containing no more than maxPathLength edges",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]