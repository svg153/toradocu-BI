[
  {
    "signature": "compare(long a,long b)",
    "name": "compare",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first unsigned long to compare",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second unsigned long to compare",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a negative value if a is less than b; a positive value if a is greater than b; or zero if they are equal",
      "kind": "RETURN",
      "condition": "args[0]<args[1] ? result.equals(args[0]) : result == args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "min(long[] array)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "a nonempty array of unsigned long values",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the value present in array that is less than or equal to every other value in the array according to compare(long, long)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "array"
        ],
        "comment": "if array is empty",
        "kind": "THROWS",
        "condition": "args[0].length==0"
      }
    ]
  },
  {
    "signature": "max(long[] array)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "a nonempty array of unsigned long values",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the value present in array that is greater than or equal to every other value in the array according to compare(long, long)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "array"
        ],
        "comment": "if array is empty",
        "kind": "THROWS",
        "condition": "args[0].length==0"
      }
    ]
  },
  {
    "signature": "join(java.lang.String separator,long[] array)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      },
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "separator"
        },
        "comment": "the text that should appear between consecutive values in the resulting string (but not at the start or end)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "an array of unsigned long values, possibly empty",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "lexicographicalComparator()",
    "name": "lexicographicalComparator",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator",
      "name": "Comparator",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "divide(long dividend,long divisor)",
    "name": "divide",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "dividend"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "divisor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "dividend"
        },
        "comment": "the dividend (numerator)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "divisor"
        },
        "comment": "the divisor (denominator)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if divisor is 0",
        "kind": "THROWS",
        "condition": "args[1]==0"
      }
    ]
  },
  {
    "signature": "remainder(long dividend,long divisor)",
    "name": "remainder",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "dividend"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "divisor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "dividend"
        },
        "comment": "the dividend (numerator)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "divisor"
        },
        "comment": "the divisor (denominator)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if divisor is 0",
        "kind": "THROWS",
        "condition": "args[1]==0"
      }
    ]
  },
  {
    "signature": "parseUnsignedLong(java.lang.String s)",
    "name": "parseUnsignedLong",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NumberFormatException",
          "name": "NumberFormatException",
          "isArray": false
        },
        "codeTags": [
          "long"
        ],
        "comment": "if the string does not contain a valid unsigned long value",
        "kind": "THROWS",
        "condition": "(args[0].contains(java.lang.CharSequence)) == false"
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "s",
          "Long.parseLong(String)"
        ],
        "comment": "if s is null (in contrast to Long.parseLong(String))",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "decode(java.lang.String stringValue)",
    "name": "decode",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "stringValue"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NumberFormatException",
          "name": "NumberFormatException",
          "isArray": false
        },
        "codeTags": [
          "long"
        ],
        "comment": "if the string does not contain a valid unsigned long value",
        "kind": "THROWS",
        "condition": "(args[0].contains(java.lang.CharSequence)) == false"
      }
    ]
  },
  {
    "signature": "parseUnsignedLong(java.lang.String s,int radix)",
    "name": "parseUnsignedLong",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "s"
        },
        "comment": "the string containing the unsigned long representation to be parsed.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "radix"
        },
        "comment": "the radix to use while parsing s",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NumberFormatException",
          "name": "NumberFormatException",
          "isArray": false
        },
        "codeTags": [
          "long",
          "radix",
          "Character.MIN_RADIX",
          "Character.MAX_RADIX"
        ],
        "comment": "if the string does not contain a valid unsigned long with the given radix, or if radix is not between Character.MIN_RADIX and Character.MAX_RADIX.",
        "kind": "THROWS",
        "condition": "(args[0].contains(java.lang.CharSequence)) == false"
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "s",
          "Long.parseLong(String)"
        ],
        "comment": "if s is null (in contrast to Long.parseLong(String))",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toString(long x)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toString(long x,int radix)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.UnsignedLongs",
      "name": "UnsignedLongs",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.UnsignedLongs",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value to convert to a string.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "radix"
        },
        "comment": "the radix to use while working with x",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "radix",
          "Character.MIN_RADIX",
          "Character.MAX_RADIX"
        ],
        "comment": "if radix is not between Character.MIN_RADIX and Character.MAX_RADIX.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]