[
  {
    "signature": "FluentIterable()",
    "name": "FluentIterable",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "FluentIterable(java.lang.Iterable iterable)",
    "name": "FluentIterable",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "from(java.lang.Iterable iterable)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "from(com.google.common.collect.FluentIterable iterable)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.FluentIterable",
          "name": "FluentIterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "of(java.lang.Object[] elements)",
    "name": "of",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "contains(java.lang.Object target)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "target",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "cycle()",
    "name": "cycle",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "append(java.lang.Iterable other)",
    "name": "append",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "append(java.lang.Object[] elements)",
    "name": "append",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "filter(com.google.common.base.Predicate predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "filter(java.lang.Class type)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the type of elements desired Stream equivalent:    {@code",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "anyMatch(com.google.common.base.Predicate predicate)",
    "name": "anyMatch",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "allMatch(com.google.common.base.Predicate predicate)",
    "name": "allMatch",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "firstMatch(com.google.common.base.Predicate predicate)",
    "name": "firstMatch",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Optional",
      "name": "Optional",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "transform(com.google.common.base.Function function)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "transformAndConcat(com.google.common.base.Function function)",
    "name": "transformAndConcat",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "first()",
    "name": "first",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Optional",
      "name": "Optional",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "iterator().next()",
          "Iterables.getFirst(java.lang.Iterable<? extends T>, T)"
        ],
        "comment": "if the first element is null; if this is a possibility, use iterator().next() or Iterables.getFirst(java.lang.Iterable<? extends T>, T) instead.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "last()",
    "name": "last",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Optional",
      "name": "Optional",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "Iterables.getLast(java.lang.Iterable<T>)"
        ],
        "comment": "if the last element is null; if this is a possibility, use Iterables.getLast(java.lang.Iterable<T>) instead.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "skip(int numberToSkip)",
    "name": "skip",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "numberToSkip"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "limit(int maxSize)",
    "name": "limit",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxSize"
        },
        "comment": "the maximum number of elements in the returned fluent iterable",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "size"
        ],
        "comment": "if size is negative",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toList()",
    "name": "toList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableList",
      "name": "ImmutableList",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toSortedList(java.util.Comparator comparator)",
    "name": "toSortedList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableList",
      "name": "ImmutableList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Comparator",
            "name": "Comparator",
            "isArray": false
          },
          "name": "comparator"
        },
        "comment": "the function by which to sort list elements",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any element is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "toSet()",
    "name": "toSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableSet",
      "name": "ImmutableSet",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toSortedSet(java.util.Comparator comparator)",
    "name": "toSortedSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableSortedSet",
      "name": "ImmutableSortedSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Comparator",
            "name": "Comparator",
            "isArray": false
          },
          "name": "comparator"
        },
        "comment": "the function by which to sort set elements",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any element is null",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "toMultiset()",
    "name": "toMultiset",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableMultiset",
      "name": "ImmutableMultiset",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toMap(com.google.common.base.Function valueFunction)",
    "name": "toMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableMap",
      "name": "ImmutableMap",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "valueFunction"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "null",
          "valueFunction",
          "null"
        ],
        "comment": "if any element of this iterable is null, or if valueFunction produces null for any key",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "index(com.google.common.base.Function keyFunction)",
    "name": "index",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableListMultimap",
      "name": "ImmutableListMultimap",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "keyFunction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "keyFunction"
        },
        "comment": "the function used to produce the key for each value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "keyFunction",
          "keyFunction",
          "null",
          "Stream",
          "stream.collect(Collectors.groupingBy(keyFunction))",
          "Map<K, List<E>>"
        ],
        "comment": "if any of the following cases is true: keyFunction is null An element in this fluent iterable is null keyFunction returns null for any element of this iterable Stream equivalent: stream.collect(Collectors.groupingBy(keyFunction)) behaves similarly, but returns a mutable Map<K, List<E>> instead, and may not preserve the order of entries).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "uniqueIndex(com.google.common.base.Function keyFunction)",
    "name": "uniqueIndex",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableMap",
      "name": "ImmutableMap",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "keyFunction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "keyFunction"
        },
        "comment": "the function used to produce the key for each value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a map mapping the result of evaluating the function keyFunction on each value in this fluent iterable to that value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "keyFunction"
        ],
        "comment": "if keyFunction produces the same key for more than one value in this fluent iterable",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "keyFunction",
          "null"
        ],
        "comment": "if any elements of this fluent iterable is null, or if keyFunction produces null for any value",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "toArray(java.lang.Class type)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E[]",
      "name": "E[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "E",
        "name": "E",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the type of the elements",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a newly-allocated array into which all the elements of this fluent iterable have been copied",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyInto(java.util.Collection collection)",
    "name": "copyInto",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "C",
      "name": "C",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "the collection to copy elements to",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "collection, for convenience",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[0])"
    },
    "throwsTags": []
  },
  {
    "signature": "join(com.google.common.base.Joiner joiner)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Joiner",
          "name": "Joiner",
          "isArray": false
        },
        "name": "joiner"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "get(int position)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.FluentIterable",
      "name": "FluentIterable",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.FluentIterable",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "position"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "position"
        },
        "comment": "position of the element to return",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the element at the specified position in this fluent iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [
          "position"
        ],
        "comment": "if position is negative or greater than or equal to the size of this fluent iterable",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  }
]