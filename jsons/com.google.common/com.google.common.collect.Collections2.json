[
  {
    "signature": "filter(java.util.Collection unfiltered,com.google.common.base.Predicate predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "safeContains(java.util.Collection collection,java.lang.Object object)",
    "name": "safeContains",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "safeRemove(java.util.Collection collection,java.lang.Object object)",
    "name": "safeRemove",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "transform(java.util.Collection fromCollection,com.google.common.base.Function function)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "fromCollection"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "containsAllImpl(java.util.Collection self,java.util.Collection c)",
    "name": "containsAllImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "self"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "self"
        },
        "comment": "a collection which might contain all elements in c",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "c"
        },
        "comment": "a collection whose elements might be contained by self",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "toStringImpl(java.util.Collection collection)",
    "name": "toStringImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newStringBuilderForCollection(int size)",
    "name": "newStringBuilderForCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.StringBuilder",
      "name": "StringBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "cast(java.lang.Iterable iterable)",
    "name": "cast",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "orderedPermutations(java.lang.Iterable elements)",
    "name": "orderedPermutations",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the original iterable whose elements have to be permuted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an immutable Collection containing all the different permutations of the original iterable.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the specified iterable is null or has any null elements.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "orderedPermutations(java.lang.Iterable elements,java.util.Comparator comparator)",
    "name": "orderedPermutations",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the original iterable whose elements have to be permuted.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Comparator",
            "name": "Comparator",
            "isArray": false
          },
          "name": "comparator"
        },
        "comment": "a comparator for the iterable's elements.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an immutable Collection containing all the different permutations of the original iterable.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "If the specified iterable is null, has any null elements, or if the specified comparator is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "permutations(java.util.Collection elements)",
    "name": "permutations",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection",
      "name": "Collection",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the original collection whose elements have to be permuted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an immutable Collection containing all the different permutations of the original collection.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the specified collection is null or has any null elements.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  }
]