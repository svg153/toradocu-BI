[
  {
    "signature": "makeChecked(com.google.common.util.concurrent.ListenableFuture future,com.google.common.base.Function mapper)",
    "name": "makeChecked",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.CheckedFuture",
      "name": "CheckedFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "future"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "immediateFuture(java.lang.Object value)",
    "name": "immediateFuture",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "immediateCheckedFuture(java.lang.Object value)",
    "name": "immediateCheckedFuture",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.CheckedFuture",
      "name": "CheckedFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "immediateFailedFuture(java.lang.Throwable throwable)",
    "name": "immediateFailedFuture",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Throwable",
          "name": "Throwable",
          "isArray": false
        },
        "name": "throwable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "immediateCancelledFuture()",
    "name": "immediateCancelledFuture",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "immediateFailedCheckedFuture(java.lang.Exception exception)",
    "name": "immediateFailedCheckedFuture",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.CheckedFuture",
      "name": "CheckedFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Exception",
          "name": "Exception",
          "isArray": false
        },
        "name": "exception"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "withFallback(com.google.common.util.concurrent.ListenableFuture input,com.google.common.util.concurrent.FutureFallback fallback)",
    "name": "withFallback",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.FutureFallback",
          "name": "FutureFallback",
          "isArray": false
        },
        "name": "fallback"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "the primary input Future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.FutureFallback",
            "name": "FutureFallback",
            "isArray": false
          },
          "name": "fallback"
        },
        "comment": "the FutureFallback implementation to be called if input fails",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "withFallback(com.google.common.util.concurrent.ListenableFuture input,com.google.common.util.concurrent.FutureFallback fallback,java.util.concurrent.Executor executor)",
    "name": "withFallback",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.FutureFallback",
          "name": "FutureFallback",
          "isArray": false
        },
        "name": "fallback"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Executor",
          "name": "Executor",
          "isArray": false
        },
        "name": "executor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "the primary input Future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.FutureFallback",
            "name": "FutureFallback",
            "isArray": false
          },
          "name": "fallback"
        },
        "comment": "the FutureFallback implementation to be called if input fails",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Executor",
            "name": "Executor",
            "isArray": false
          },
          "name": "executor"
        },
        "comment": "the executor that runs fallback if input fails",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "catching(com.google.common.util.concurrent.ListenableFuture input,java.lang.Class exceptionType,com.google.common.base.Function fallback)",
    "name": "catching",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionType"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "fallback"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "the primary input Future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "exceptionType"
        },
        "comment": "the exception type that triggers use of fallback. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding Throwable.class in particular.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "fallback"
        },
        "comment": "the Function implementation to be called if input fails with the expected exception type",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "catching(com.google.common.util.concurrent.ListenableFuture input,java.lang.Class exceptionType,com.google.common.base.Function fallback,java.util.concurrent.Executor executor)",
    "name": "catching",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionType"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "fallback"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Executor",
          "name": "Executor",
          "isArray": false
        },
        "name": "executor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "the primary input Future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "exceptionType"
        },
        "comment": "the exception type that triggers use of fallback. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding Throwable.class in particular.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "fallback"
        },
        "comment": "the Function implementation to be called if input fails with the expected exception type",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Executor",
            "name": "Executor",
            "isArray": false
          },
          "name": "executor"
        },
        "comment": "the executor that runs fallback if input fails",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "catchingAsync(com.google.common.util.concurrent.ListenableFuture input,java.lang.Class exceptionType,com.google.common.util.concurrent.AsyncFunction fallback)",
    "name": "catchingAsync",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionType"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
          "name": "AsyncFunction",
          "isArray": false
        },
        "name": "fallback"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "the primary input Future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "exceptionType"
        },
        "comment": "the exception type that triggers use of fallback. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding Throwable.class in particular.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
            "name": "AsyncFunction",
            "isArray": false
          },
          "name": "fallback"
        },
        "comment": "the AsyncFunction implementation to be called if input fails with the expected exception type",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "catchingAsync(com.google.common.util.concurrent.ListenableFuture input,java.lang.Class exceptionType,com.google.common.util.concurrent.AsyncFunction fallback,java.util.concurrent.Executor executor)",
    "name": "catchingAsync",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionType"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
          "name": "AsyncFunction",
          "isArray": false
        },
        "name": "fallback"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Executor",
          "name": "Executor",
          "isArray": false
        },
        "name": "executor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "the primary input Future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "exceptionType"
        },
        "comment": "the exception type that triggers use of fallback. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding Throwable.class in particular.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
            "name": "AsyncFunction",
            "isArray": false
          },
          "name": "fallback"
        },
        "comment": "the AsyncFunction implementation to be called if input fails with the expected exception type",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Executor",
            "name": "Executor",
            "isArray": false
          },
          "name": "executor"
        },
        "comment": "the executor that runs fallback if input fails",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "asAsyncFunction(com.google.common.util.concurrent.FutureFallback fallback)",
    "name": "asAsyncFunction",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
      "name": "AsyncFunction",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.FutureFallback",
          "name": "FutureFallback",
          "isArray": false
        },
        "name": "fallback"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "withTimeout(com.google.common.util.concurrent.ListenableFuture delegate,long time,java.util.concurrent.TimeUnit unit,java.util.concurrent.ScheduledExecutorService scheduledExecutor)",
    "name": "withTimeout",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "delegate"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "time"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ScheduledExecutorService",
          "name": "ScheduledExecutorService",
          "isArray": false
        },
        "name": "scheduledExecutor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "delegate"
        },
        "comment": "The future to delegate to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "time"
        },
        "comment": "when to timeout the future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.TimeUnit",
            "name": "TimeUnit",
            "isArray": false
          },
          "name": "unit"
        },
        "comment": "the time unit of the time parameter",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.ScheduledExecutorService",
            "name": "ScheduledExecutorService",
            "isArray": false
          },
          "name": "scheduledExecutor"
        },
        "comment": "The executor service to enforce the timeout.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "transform(com.google.common.util.concurrent.ListenableFuture input,com.google.common.util.concurrent.AsyncFunction function)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
          "name": "AsyncFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "The future to transform",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
            "name": "AsyncFunction",
            "isArray": false
          },
          "name": "function"
        },
        "comment": "A function to transform the result of the input future to the result of the output future",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that holds result of the function (if the input succeeded) or the original input's failure (if not)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "transform(com.google.common.util.concurrent.ListenableFuture input,com.google.common.util.concurrent.AsyncFunction function,java.util.concurrent.Executor executor)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
          "name": "AsyncFunction",
          "isArray": false
        },
        "name": "function"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Executor",
          "name": "Executor",
          "isArray": false
        },
        "name": "executor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "The future to transform",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
            "name": "AsyncFunction",
            "isArray": false
          },
          "name": "function"
        },
        "comment": "A function to transform the result of the input future to the result of the output future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Executor",
            "name": "Executor",
            "isArray": false
          },
          "name": "executor"
        },
        "comment": "Executor to run the function in.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that holds result of the function (if the input succeeded) or the original input's failure (if not)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "transformAsync(com.google.common.util.concurrent.ListenableFuture input,com.google.common.util.concurrent.AsyncFunction function)",
    "name": "transformAsync",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
          "name": "AsyncFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "The future to transform",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
            "name": "AsyncFunction",
            "isArray": false
          },
          "name": "function"
        },
        "comment": "A function to transform the result of the input future to the result of the output future",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that holds result of the function (if the input succeeded) or the original input's failure (if not)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "transformAsync(com.google.common.util.concurrent.ListenableFuture input,com.google.common.util.concurrent.AsyncFunction function,java.util.concurrent.Executor executor)",
    "name": "transformAsync",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
          "name": "AsyncFunction",
          "isArray": false
        },
        "name": "function"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Executor",
          "name": "Executor",
          "isArray": false
        },
        "name": "executor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "The future to transform",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.AsyncFunction",
            "name": "AsyncFunction",
            "isArray": false
          },
          "name": "function"
        },
        "comment": "A function to transform the result of the input future to the result of the output future",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Executor",
            "name": "Executor",
            "isArray": false
          },
          "name": "executor"
        },
        "comment": "Executor to run the function in.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that holds result of the function (if the input succeeded) or the original input's failure (if not)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "transform(com.google.common.util.concurrent.ListenableFuture input,com.google.common.base.Function function)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "The future to transform",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "function"
        },
        "comment": "A Function to transform the results of the provided future to the results of the returned future. This will be run in the thread that notifies input it is complete.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that holds result of the transformation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "transform(com.google.common.util.concurrent.ListenableFuture input,com.google.common.base.Function function,java.util.concurrent.Executor executor)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Executor",
          "name": "Executor",
          "isArray": false
        },
        "name": "executor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "The future to transform",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "function"
        },
        "comment": "A Function to transform the results of the provided future to the results of the returned future.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Executor",
            "name": "Executor",
            "isArray": false
          },
          "name": "executor"
        },
        "comment": "Executor to run the function in.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that holds result of the transformation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lazyTransform(java.util.concurrent.Future input,com.google.common.base.Function function)",
    "name": "lazyTransform",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.Future",
      "name": "Future",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Future",
          "name": "Future",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Future",
            "name": "Future",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "The future to transform",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Function",
            "name": "Function",
            "isArray": false
          },
          "name": "function"
        },
        "comment": "A Function to transform the results of the provided future to the results of the returned future.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that returns the result of the transformation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "dereference(com.google.common.util.concurrent.ListenableFuture nested)",
    "name": "dereference",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "nested"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "nested"
        },
        "comment": "The nested future to transform.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A future that holds result of the inner future.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "allAsList(com.google.common.util.concurrent.ListenableFuture[] futures)",
    "name": "allAsList",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture[]",
          "name": "ListenableFuture[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          }
        },
        "name": "futures"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture[]",
            "name": "ListenableFuture[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
              "name": "ListenableFuture",
              "isArray": false
            }
          },
          "name": "futures"
        },
        "comment": "futures to combine",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a future that provides a list of the results of the component futures",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "allAsList(java.lang.Iterable futures)",
    "name": "allAsList",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "futures"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "futures"
        },
        "comment": "futures to combine",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a future that provides a list of the results of the component futures",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture future)",
    "name": "nonCancellationPropagating",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "future"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "successfulAsList(com.google.common.util.concurrent.ListenableFuture[] futures)",
    "name": "successfulAsList",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture[]",
          "name": "ListenableFuture[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          }
        },
        "name": "futures"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture[]",
            "name": "ListenableFuture[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
              "name": "ListenableFuture",
              "isArray": false
            }
          },
          "name": "futures"
        },
        "comment": "futures to combine",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a future that provides a list of the results of the component futures",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "successfulAsList(java.lang.Iterable futures)",
    "name": "successfulAsList",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
      "name": "ListenableFuture",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "futures"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "futures"
        },
        "comment": "futures to combine",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a future that provides a list of the results of the component futures",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "inCompletionOrder(java.lang.Iterable futures)",
    "name": "inCompletionOrder",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableList",
      "name": "ImmutableList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "futures"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addCallback(com.google.common.util.concurrent.ListenableFuture future,com.google.common.util.concurrent.FutureCallback callback)",
    "name": "addCallback",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "future"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.FutureCallback",
          "name": "FutureCallback",
          "isArray": false
        },
        "name": "callback"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "future"
        },
        "comment": "The future attach the callback to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.FutureCallback",
            "name": "FutureCallback",
            "isArray": false
          },
          "name": "callback"
        },
        "comment": "The callback to invoke when future is completed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "addCallback(com.google.common.util.concurrent.ListenableFuture future,com.google.common.util.concurrent.FutureCallback callback,java.util.concurrent.Executor executor)",
    "name": "addCallback",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
          "name": "ListenableFuture",
          "isArray": false
        },
        "name": "future"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.FutureCallback",
          "name": "FutureCallback",
          "isArray": false
        },
        "name": "callback"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Executor",
          "name": "Executor",
          "isArray": false
        },
        "name": "executor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.ListenableFuture",
            "name": "ListenableFuture",
            "isArray": false
          },
          "name": "future"
        },
        "comment": "The future attach the callback to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.util.concurrent.FutureCallback",
            "name": "FutureCallback",
            "isArray": false
          },
          "name": "callback"
        },
        "comment": "The callback to invoke when future is completed.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.Executor",
            "name": "Executor",
            "isArray": false
          },
          "name": "executor"
        },
        "comment": "The executor to run callback when the future completes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "get(java.util.concurrent.Future future,java.lang.Class exceptionClass)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Future",
          "name": "Future",
          "isArray": false
        },
        "name": "future"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionClass"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "X",
          "name": "X",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException"
        ],
        "comment": "if get throws any checked exception except for an ExecutionException whose cause is not itself a checked exception",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.UncheckedExecutionException",
          "name": "UncheckedExecutionException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "RuntimeException"
        ],
        "comment": "if get throws an ExecutionException with a RuntimeException as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.ExecutionError",
          "name": "ExecutionError",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "Error"
        ],
        "comment": "if get throws an ExecutionException with an Error as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.util.concurrent.CancellationException",
          "name": "CancellationException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "CancellationException"
        ],
        "comment": "if get throws a CancellationException",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "exceptionClass",
          "RuntimeException"
        ],
        "comment": "if exceptionClass extends RuntimeException or does not have a suitable constructor",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "get(java.util.concurrent.Future future,long timeout,java.util.concurrent.TimeUnit unit,java.lang.Class exceptionClass)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Future",
          "name": "Future",
          "isArray": false
        },
        "name": "future"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionClass"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "X",
          "name": "X",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException"
        ],
        "comment": "if get throws any checked exception except for an ExecutionException whose cause is not itself a checked exception",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.UncheckedExecutionException",
          "name": "UncheckedExecutionException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "RuntimeException"
        ],
        "comment": "if get throws an ExecutionException with a RuntimeException as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.ExecutionError",
          "name": "ExecutionError",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "Error"
        ],
        "comment": "if get throws an ExecutionException with an Error as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.util.concurrent.CancellationException",
          "name": "CancellationException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "CancellationException"
        ],
        "comment": "if get throws a CancellationException",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "exceptionClass",
          "RuntimeException"
        ],
        "comment": "if exceptionClass extends RuntimeException or does not have a suitable constructor",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getChecked(java.util.concurrent.Future future,java.lang.Class exceptionClass)",
    "name": "getChecked",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Future",
          "name": "Future",
          "isArray": false
        },
        "name": "future"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionClass"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "X",
          "name": "X",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException"
        ],
        "comment": "if get throws any checked exception except for an ExecutionException whose cause is not itself a checked exception",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.UncheckedExecutionException",
          "name": "UncheckedExecutionException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "RuntimeException"
        ],
        "comment": "if get throws an ExecutionException with a RuntimeException as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.ExecutionError",
          "name": "ExecutionError",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "Error"
        ],
        "comment": "if get throws an ExecutionException with an Error as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.util.concurrent.CancellationException",
          "name": "CancellationException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "CancellationException"
        ],
        "comment": "if get throws a CancellationException",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "exceptionClass",
          "RuntimeException"
        ],
        "comment": "if exceptionClass extends RuntimeException or does not have a suitable constructor",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getChecked(java.util.concurrent.Future future,java.lang.Class exceptionClass,long timeout,java.util.concurrent.TimeUnit unit)",
    "name": "getChecked",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Future",
          "name": "Future",
          "isArray": false
        },
        "name": "future"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "exceptionClass"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "X",
          "name": "X",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException"
        ],
        "comment": "if get throws any checked exception except for an ExecutionException whose cause is not itself a checked exception",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.UncheckedExecutionException",
          "name": "UncheckedExecutionException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "RuntimeException"
        ],
        "comment": "if get throws an ExecutionException with a RuntimeException as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.ExecutionError",
          "name": "ExecutionError",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "Error"
        ],
        "comment": "if get throws an ExecutionException with an Error as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.util.concurrent.CancellationException",
          "name": "CancellationException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "CancellationException"
        ],
        "comment": "if get throws a CancellationException",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "exceptionClass",
          "RuntimeException"
        ],
        "comment": "if exceptionClass extends RuntimeException or does not have a suitable constructor",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getUnchecked(java.util.concurrent.Future future)",
    "name": "getUnchecked",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.Futures",
      "name": "Futures",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.Futures",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Future",
          "name": "Future",
          "isArray": false
        },
        "name": "future"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.UncheckedExecutionException",
          "name": "UncheckedExecutionException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "Exception"
        ],
        "comment": "if get throws an ExecutionException with an Exception as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "com.google.common.util.concurrent.ExecutionError",
          "name": "ExecutionError",
          "isArray": false
        },
        "codeTags": [
          "get",
          "ExecutionException",
          "Error"
        ],
        "comment": "if get throws an ExecutionException with an Error as its cause",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.util.concurrent.CancellationException",
          "name": "CancellationException",
          "isArray": false
        },
        "codeTags": [
          "get",
          "CancellationException"
        ],
        "comment": "if get throws a CancellationException",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]