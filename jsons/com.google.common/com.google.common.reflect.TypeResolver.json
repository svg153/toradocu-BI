[
  {
    "signature": "TypeResolver()",
    "name": "TypeResolver",
    "containingClass": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "targetClass": "com.google.common.reflect.TypeResolver",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "accordingTo(java.lang.reflect.Type type)",
    "name": "accordingTo",
    "containingClass": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "targetClass": "com.google.common.reflect.TypeResolver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "where(java.lang.reflect.Type formal,java.lang.reflect.Type actual)",
    "name": "where",
    "containingClass": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "targetClass": "com.google.common.reflect.TypeResolver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "formal"
      },
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "actual"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "formal"
        },
        "comment": "The type whose type variables or itself is mapped to other type(s). It's almost always a bug if formal isn't a type variable and contains no type variable. Make sure you are passing the two parameters in the right order.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "actual"
        },
        "comment": "The type that the formal type variable(s) are mapped to. It can be or contain yet other type variables, in which case these type variables will be further resolved if corresponding mappings exist in the current TypeResolver instance.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "where(java.util.Map mappings)",
    "name": "where",
    "containingClass": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "targetClass": "com.google.common.reflect.TypeResolver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "mappings"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "resolveType(java.lang.reflect.Type type)",
    "name": "resolveType",
    "containingClass": {
      "qualifiedName": "com.google.common.reflect.TypeResolver",
      "name": "TypeResolver",
      "isArray": false
    },
    "targetClass": "com.google.common.reflect.TypeResolver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Type",
      "name": "Type",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]