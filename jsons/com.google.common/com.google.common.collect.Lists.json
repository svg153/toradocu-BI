[
  {
    "signature": "newArrayList()",
    "name": "newArrayList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newArrayList(java.lang.Object[] elements)",
    "name": "newArrayList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "computeArrayListCapacity(int arraySize)",
    "name": "computeArrayListCapacity",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "arraySize"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newArrayList(java.lang.Iterable elements)",
    "name": "newArrayList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newArrayList(java.util.Iterator elements)",
    "name": "newArrayList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newArrayListWithCapacity(int initialArraySize)",
    "name": "newArrayListWithCapacity",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialArraySize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "initialArraySize"
        },
        "comment": "the exact size of the initial backing array for the returned array list (ArrayList documentation calls this value the \"capacity\")",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new, empty ArrayList which is guaranteed not to resize itself unless its size reaches initialArraySize + 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "initialArraySize"
        ],
        "comment": "if initialArraySize is negative",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "newArrayListWithExpectedSize(int estimatedSize)",
    "name": "newArrayListWithExpectedSize",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "estimatedSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "estimatedSize"
        },
        "comment": "an estimate of the eventual List.size() of the new list",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new, empty ArrayList, sized appropriately to hold the estimated number of elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "estimatedSize"
        ],
        "comment": "if estimatedSize is negative",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "newLinkedList()",
    "name": "newLinkedList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.LinkedList",
      "name": "LinkedList",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newLinkedList(java.lang.Iterable elements)",
    "name": "newLinkedList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.LinkedList",
      "name": "LinkedList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newCopyOnWriteArrayList()",
    "name": "newCopyOnWriteArrayList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new, empty CopyOnWriteArrayList",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newCopyOnWriteArrayList(java.lang.Iterable elements)",
    "name": "newCopyOnWriteArrayList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the elements that the list should contain, in order",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new CopyOnWriteArrayList containing those elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "asList(java.lang.Object first,java.lang.Object[] rest)",
    "name": "asList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "first",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "rest"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "first",
          "nullable": true
        },
        "comment": "the first element",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "rest"
        },
        "comment": "an array of additional elements, possibly empty",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an unmodifiable list containing the specified elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "asList(java.lang.Object first,java.lang.Object second,java.lang.Object[] rest)",
    "name": "asList",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "first",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "second",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "rest"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "first",
          "nullable": true
        },
        "comment": "the first element",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "second",
          "nullable": true
        },
        "comment": "the second element",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "rest"
        },
        "comment": "an array of additional elements, possibly empty",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an unmodifiable list containing the specified elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "cartesianProduct(java.util.List lists)",
    "name": "cartesianProduct",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "lists"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "lists"
        },
        "comment": "the lists to choose elements from, in the order that the elements chosen from those lists should appear in the resulting lists",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the Cartesian product, as an immutable list containing immutable lists",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "Integer.MAX_VALUE"
        ],
        "comment": "if the size of the cartesian product would be greater than Integer.MAX_VALUE",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "lists",
          "lists"
        ],
        "comment": "if lists, any one of the lists, or any element of a provided list is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[0]==null"
      }
    ]
  },
  {
    "signature": "cartesianProduct(java.util.List[] lists)",
    "name": "cartesianProduct",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List[]",
          "name": "List[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          }
        },
        "name": "lists"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List[]",
            "name": "List[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.util.List",
              "name": "List",
              "isArray": false
            }
          },
          "name": "lists"
        },
        "comment": "the lists to choose elements from, in the order that the elements chosen from those lists should appear in the resulting lists",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the Cartesian product, as an immutable list containing immutable lists",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "Integer.MAX_VALUE"
        ],
        "comment": "if the size of the cartesian product would be greater than Integer.MAX_VALUE",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "lists",
          "lists"
        ],
        "comment": "if lists, any one of the lists, or any element of a provided list is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "transform(java.util.List fromList,com.google.common.base.Function function)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "fromList"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "partition(java.util.List list,int size)",
    "name": "partition",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "list"
        },
        "comment": "the list to return consecutive sublists of",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "size"
        },
        "comment": "the desired size of each sublist (the last may be smaller)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a list of consecutive sublists",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "partitionSize"
        ],
        "comment": "if partitionSize is nonpositive",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "charactersOf(java.lang.String string)",
    "name": "charactersOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableList",
      "name": "ImmutableList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "charactersOf(java.lang.CharSequence sequence)",
    "name": "charactersOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.CharSequence",
            "name": "CharSequence",
            "isArray": false
          },
          "name": "sequence"
        },
        "comment": "the character sequence to view as a List of characters",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an List<Character> view of the character sequence",
      "kind": "RETURN",
      "condition": "true ?result<{Character}"
    },
    "throwsTags": []
  },
  {
    "signature": "reverse(java.util.List list)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "hashCodeImpl(java.util.List list)",
    "name": "hashCodeImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "equalsImpl(java.util.List thisList,java.lang.Object other)",
    "name": "equalsImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "thisList"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "other",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addAllImpl(java.util.List list,int index,java.lang.Iterable elements)",
    "name": "addAllImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "indexOfImpl(java.util.List list,java.lang.Object element)",
    "name": "indexOfImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "lastIndexOfImpl(java.util.List list,java.lang.Object element)",
    "name": "lastIndexOfImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "listIteratorImpl(java.util.List list,int index)",
    "name": "listIteratorImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "subListImpl(java.util.List list,int fromIndex,int toIndex)",
    "name": "subListImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "cast(java.lang.Iterable iterable)",
    "name": "cast",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Lists",
      "name": "Lists",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Lists",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]