[
  {
    "signature": "immutableEnumSet(java.lang.Enum anElement,java.lang.Enum[] otherElements)",
    "name": "immutableEnumSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableSet",
      "name": "ImmutableSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Enum",
          "name": "Enum",
          "isArray": false
        },
        "name": "anElement"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Enum[]",
          "name": "Enum[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Enum",
            "name": "Enum",
            "isArray": false
          }
        },
        "name": "otherElements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Enum",
            "name": "Enum",
            "isArray": false
          },
          "name": "anElement"
        },
        "comment": "one of the elements the set should contain",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Enum[]",
            "name": "Enum[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Enum",
              "name": "Enum",
              "isArray": false
            }
          },
          "name": "otherElements"
        },
        "comment": "the rest of the elements the set should contain",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an immutable set containing those elements, minus duplicates",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "immutableEnumSet(java.lang.Iterable elements)",
    "name": "immutableEnumSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableSet",
      "name": "ImmutableSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the elements, all of the same enum type, that the set should contain",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an immutable set containing those elements, minus duplicates",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newEnumSet(java.lang.Iterable iterable,java.lang.Class elementType)",
    "name": "newEnumSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.EnumSet",
      "name": "EnumSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "elementType"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newHashSet()",
    "name": "newHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashSet",
      "name": "HashSet",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newHashSet(java.lang.Object[] elements)",
    "name": "newHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.HashSet",
      "name": "HashSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newHashSetWithExpectedSize(int expectedSize)",
    "name": "newHashSetWithExpectedSize",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashSet",
      "name": "HashSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expectedSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "expectedSize"
        },
        "comment": "the number of elements you expect to add to the returned set",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new, empty HashSet with enough capacity to hold expectedSize elements without resizing",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "expectedSize"
        ],
        "comment": "if expectedSize is negative",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "newHashSet(java.lang.Iterable elements)",
    "name": "newHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashSet",
      "name": "HashSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newHashSet(java.util.Iterator elements)",
    "name": "newHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashSet",
      "name": "HashSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newConcurrentHashSet()",
    "name": "newConcurrentHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new, empty thread-safe Set",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newConcurrentHashSet(java.lang.Iterable elements)",
    "name": "newConcurrentHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the elements that the set should contain",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new thread-safe set containing those elements (minus duplicates)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "elements"
        ],
        "comment": "if elements or any of its contents is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "newLinkedHashSet()",
    "name": "newLinkedHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.LinkedHashSet",
      "name": "LinkedHashSet",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new, empty LinkedHashSet",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newLinkedHashSetWithExpectedSize(int expectedSize)",
    "name": "newLinkedHashSetWithExpectedSize",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.LinkedHashSet",
      "name": "LinkedHashSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expectedSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "expectedSize"
        },
        "comment": "the number of elements you expect to add to the returned set",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new, empty LinkedHashSet with enough capacity to hold expectedSize elements without resizing",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "expectedSize"
        ],
        "comment": "if expectedSize is negative",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "newLinkedHashSet(java.lang.Iterable elements)",
    "name": "newLinkedHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.LinkedHashSet",
      "name": "LinkedHashSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the elements that the set should contain, in order",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new LinkedHashSet containing those elements (minus duplicates)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newTreeSet()",
    "name": "newTreeSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new, empty TreeSet",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newTreeSet(java.lang.Iterable elements)",
    "name": "newTreeSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the elements that the set should contain",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new TreeSet containing those elements (minus duplicates)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newTreeSet(java.util.Comparator comparator)",
    "name": "newTreeSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Comparator",
            "name": "Comparator",
            "isArray": false
          },
          "name": "comparator"
        },
        "comment": "the comparator to use to sort the set",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new, empty TreeSet",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "comparator"
        ],
        "comment": "if comparator is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "newIdentityHashSet()",
    "name": "newIdentityHashSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newCopyOnWriteArraySet()",
    "name": "newCopyOnWriteArraySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new, empty CopyOnWriteArraySet",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newCopyOnWriteArraySet(java.lang.Iterable elements)",
    "name": "newCopyOnWriteArraySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the elements that the set should contain, in order",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new CopyOnWriteArraySet containing those elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "complementOf(java.util.Collection collection)",
    "name": "complementOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.EnumSet",
      "name": "EnumSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "the collection whose complement should be stored in the enum set",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new, modifiable EnumSet containing all values of the enum that aren't present in the given collection",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "collection",
          "EnumSet"
        ],
        "comment": "if collection is not an EnumSet instance and contains no elements",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "complementOf(java.util.Collection collection,java.lang.Class type)",
    "name": "complementOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.EnumSet",
      "name": "EnumSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "collection"
        },
        "comment": "the collection whose complement should be stored in the EnumSet",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the type of the elements in the set",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new, modifiable EnumSet initially containing all the values of the enum not present in the given collection",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newSetFromMap(java.util.Map map)",
    "name": "newSetFromMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "map"
        },
        "comment": "the backing map",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the set backed by the map",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "map"
        ],
        "comment": "if map is not empty",
        "kind": "THROWS",
        "condition": "(args[0].isEmpty()) == false"
      }
    ]
  },
  {
    "signature": "union(java.util.Set set1,java.util.Set set2)",
    "name": "union",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Sets.SetView",
      "name": "SetView",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set1"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set2"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "intersection(java.util.Set set1,java.util.Set set2)",
    "name": "intersection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Sets.SetView",
      "name": "SetView",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set1"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set2"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "difference(java.util.Set set1,java.util.Set set2)",
    "name": "difference",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Sets.SetView",
      "name": "SetView",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set1"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set2"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "symmetricDifference(java.util.Set set1,java.util.Set set2)",
    "name": "symmetricDifference",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Sets.SetView",
      "name": "SetView",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set1"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set2"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "filter(java.util.Set unfiltered,com.google.common.base.Predicate predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "filter(java.util.SortedSet unfiltered,com.google.common.base.Predicate predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedSet",
          "name": "SortedSet",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "filterSortedIgnoreNavigable(java.util.SortedSet unfiltered,com.google.common.base.Predicate predicate)",
    "name": "filterSortedIgnoreNavigable",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedSet",
          "name": "SortedSet",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "filter(java.util.NavigableSet unfiltered,com.google.common.base.Predicate predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableSet",
          "name": "NavigableSet",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "cartesianProduct(java.util.List sets)",
    "name": "cartesianProduct",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "sets"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "sets"
        },
        "comment": "the sets to choose elements from, in the order that the elements chosen from those sets should appear in the resulting lists",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the Cartesian product, as an immutable set containing immutable lists",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "sets",
          "sets"
        ],
        "comment": "if sets, any one of the sets, or any element of a provided set is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "cartesianProduct(java.util.Set[] sets)",
    "name": "cartesianProduct",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set[]",
          "name": "Set[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          }
        },
        "name": "sets"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set[]",
            "name": "Set[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.util.Set",
              "name": "Set",
              "isArray": false
            }
          },
          "name": "sets"
        },
        "comment": "the sets to choose elements from, in the order that the elements chosen from those sets should appear in the resulting lists",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the Cartesian product, as an immutable set containing immutable lists",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "sets",
          "sets"
        ],
        "comment": "if sets, any one of the sets, or any element of a provided set is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "powerSet(java.util.Set set)",
    "name": "powerSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          },
          "name": "set"
        },
        "comment": "the set of elements to construct a power set from",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the power set, as an immutable set of immutable sets",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "set",
          "int"
        ],
        "comment": "if set has more than 30 unique elements (causing the power set size to exceed the int range)",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "set",
          "null"
        ],
        "comment": "if set is or contains null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[0].contains(null)"
      }
    ]
  },
  {
    "signature": "hashCodeImpl(java.util.Set s)",
    "name": "hashCodeImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "equalsImpl(java.util.Set s,java.lang.Object object)",
    "name": "equalsImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object",
        "nullable": true
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "unmodifiableNavigableSet(java.util.NavigableSet set)",
    "name": "unmodifiableNavigableSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableSet",
          "name": "NavigableSet",
          "isArray": false
        },
        "name": "set"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.NavigableSet",
            "name": "NavigableSet",
            "isArray": false
          },
          "name": "set"
        },
        "comment": "the navigable set for which an unmodifiable view is to be returned",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an unmodifiable view of the specified navigable set",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "synchronizedNavigableSet(java.util.NavigableSet navigableSet)",
    "name": "synchronizedNavigableSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableSet",
          "name": "NavigableSet",
          "isArray": false
        },
        "name": "navigableSet"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.NavigableSet",
            "name": "NavigableSet",
            "isArray": false
          },
          "name": "navigableSet"
        },
        "comment": "the navigable set to be \"wrapped\" in a synchronized navigable set.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a synchronized view of the specified navigable set.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "removeAllImpl(java.util.Set set,java.util.Iterator iterator)",
    "name": "removeAllImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "removeAllImpl(java.util.Set set,java.util.Collection collection)",
    "name": "removeAllImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Sets",
      "name": "Sets",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Sets",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "set"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]