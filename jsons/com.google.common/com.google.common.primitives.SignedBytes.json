[
  {
    "signature": "checkedCast(long value)",
    "name": "checkedCast",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.SignedBytes",
      "name": "SignedBytes",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.SignedBytes",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "any value in the range of the byte type",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the byte value that equals value",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "value",
          "Byte.MAX_VALUE",
          "Byte.MIN_VALUE"
        ],
        "comment": "if value is greater than Byte.MAX_VALUE or less than Byte.MIN_VALUE",
        "kind": "THROWS",
        "condition": "args[0]>target.MAX_VALUE || args[0]<target.MIN_VALUE"
      }
    ]
  },
  {
    "signature": "saturatedCast(long value)",
    "name": "saturatedCast",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.SignedBytes",
      "name": "SignedBytes",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.SignedBytes",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "any long value",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the same value cast to byte if it is in the range of the byte type, Byte.MAX_VALUE if it is too large, or Byte.MIN_VALUE if it is too small",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "compare(byte a,byte b)",
    "name": "compare",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.SignedBytes",
      "name": "SignedBytes",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.SignedBytes",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first byte to compare",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second byte to compare",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a negative value if a is less than b; a positive value if a is greater than b; or zero if they are equal",
      "kind": "RETURN",
      "condition": "args[0]<args[1] ? result.equals(args[0]) : result == args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "min(byte[] array)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.SignedBytes",
      "name": "SignedBytes",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.SignedBytes",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte[]",
          "name": "byte[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          }
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte[]",
            "name": "byte[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "byte",
              "name": "byte",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "a nonempty array of byte values",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the value present in array that is less than or equal to every other value in the array",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "array"
        ],
        "comment": "if array is empty",
        "kind": "THROWS",
        "condition": "args[0].length==0"
      }
    ]
  },
  {
    "signature": "max(byte[] array)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.SignedBytes",
      "name": "SignedBytes",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.SignedBytes",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte[]",
          "name": "byte[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          }
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte[]",
            "name": "byte[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "byte",
              "name": "byte",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "a nonempty array of byte values",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the value present in array that is greater than or equal to every other value in the array",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "array"
        ],
        "comment": "if array is empty",
        "kind": "THROWS",
        "condition": "args[0].length==0"
      }
    ]
  },
  {
    "signature": "join(java.lang.String separator,byte[] array)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.SignedBytes",
      "name": "SignedBytes",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.SignedBytes",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      },
      {
        "type": {
          "qualifiedName": "byte[]",
          "name": "byte[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          }
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "separator"
        },
        "comment": "the text that should appear between consecutive values in the resulting string (but not at the start or end)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte[]",
            "name": "byte[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "byte",
              "name": "byte",
              "isArray": false
            }
          },
          "name": "array"
        },
        "comment": "an array of byte values, possibly empty",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "lexicographicalComparator()",
    "name": "lexicographicalComparator",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.SignedBytes",
      "name": "SignedBytes",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.SignedBytes",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator",
      "name": "Comparator",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  }
]