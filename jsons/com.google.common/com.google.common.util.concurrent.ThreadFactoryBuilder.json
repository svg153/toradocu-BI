[
  {
    "signature": "ThreadFactoryBuilder()",
    "name": "ThreadFactoryBuilder",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.ThreadFactoryBuilder",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "setNameFormat(java.lang.String nameFormat)",
    "name": "setNameFormat",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.ThreadFactoryBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "nameFormat"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "nameFormat"
        },
        "comment": "a String.format(String, Object...)-compatible format String, to which a unique integer (0, 1, etc.) will be supplied as the single parameter. This integer will be unique to the built instance of the ThreadFactory and will be assigned sequentially. For example, \"rpc-pool-%d\" will generate thread names like \"rpc-pool-0\", \"rpc-pool-1\", \"rpc-pool-2\", etc.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "this for the builder pattern",
      "kind": "RETURN",
      "condition": "true ? result.equals(target)"
    },
    "throwsTags": []
  },
  {
    "signature": "setDaemon(boolean daemon)",
    "name": "setDaemon",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.ThreadFactoryBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "daemon"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "daemon"
        },
        "comment": "whether or not new Threads created with this ThreadFactory will be daemon threads",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "this for the builder pattern",
      "kind": "RETURN",
      "condition": "true ? result.equals(target)"
    },
    "throwsTags": []
  },
  {
    "signature": "setPriority(int priority)",
    "name": "setPriority",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.ThreadFactoryBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "priority"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "priority"
        },
        "comment": "the priority for new Threads created with this ThreadFactory",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "this for the builder pattern",
      "kind": "RETURN",
      "condition": "true ? result.equals(target)"
    },
    "throwsTags": []
  },
  {
    "signature": "setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler uncaughtExceptionHandler)",
    "name": "setUncaughtExceptionHandler",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.ThreadFactoryBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread.UncaughtExceptionHandler",
          "name": "UncaughtExceptionHandler",
          "isArray": false
        },
        "name": "uncaughtExceptionHandler"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Thread.UncaughtExceptionHandler",
            "name": "UncaughtExceptionHandler",
            "isArray": false
          },
          "name": "uncaughtExceptionHandler"
        },
        "comment": "the uncaught exception handler for new Threads created with this ThreadFactory",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "this for the builder pattern",
      "kind": "RETURN",
      "condition": "true ? result.equals(target)"
    },
    "throwsTags": []
  },
  {
    "signature": "setThreadFactory(java.util.concurrent.ThreadFactory backingThreadFactory)",
    "name": "setThreadFactory",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.ThreadFactoryBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ThreadFactory",
          "name": "ThreadFactory",
          "isArray": false
        },
        "name": "backingThreadFactory"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.ThreadFactory",
            "name": "ThreadFactory",
            "isArray": false
          },
          "name": "backingThreadFactory"
        },
        "comment": "the backing ThreadFactory which will be delegated to during thread creation.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "this for the builder pattern",
      "kind": "RETURN",
      "condition": "true ? result.equals(target)"
    },
    "throwsTags": []
  },
  {
    "signature": "build()",
    "name": "build",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.ThreadFactoryBuilder",
      "name": "ThreadFactoryBuilder",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.ThreadFactoryBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.ThreadFactory",
      "name": "ThreadFactory",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the fully constructed ThreadFactory",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]