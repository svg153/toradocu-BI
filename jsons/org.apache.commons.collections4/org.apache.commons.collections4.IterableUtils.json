[
  {
    "signature": "emptyIterable()",
    "name": "emptyIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "an empty iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "chainedIterable(java.lang.Iterable a,java.lang.Iterable b)",
    "name": "chainedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new iterable, combining the provided iterables",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either a or b is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "chainedIterable(java.lang.Iterable a,java.lang.Iterable b,java.lang.Iterable c)",
    "name": "chainedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "c"
        },
        "comment": "the third iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new iterable, combining the provided iterables",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either of the provided iterables is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null || args[2]==null"
      }
    ]
  },
  {
    "signature": "chainedIterable(java.lang.Iterable a,java.lang.Iterable b,java.lang.Iterable c,java.lang.Iterable d)",
    "name": "chainedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "c"
        },
        "comment": "the third iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "d"
        },
        "comment": "the fourth iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[3]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new iterable, combining the provided iterables",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either of the provided iterables is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null || args[2]==null || args[3]==null"
      }
    ]
  },
  {
    "signature": "chainedIterable(java.lang.Iterable[] iterables)",
    "name": "chainedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable[]",
          "name": "Iterable[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          }
        },
        "name": "iterables"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable[]",
            "name": "Iterable[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Iterable",
              "name": "Iterable",
              "isArray": false
            }
          },
          "name": "iterables"
        },
        "comment": "the iterables to combine, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new iterable, combining the provided iterables",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either of the provided iterables is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "collatedIterable(java.lang.Iterable a,java.lang.Iterable b)",
    "name": "collatedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a filtered view on the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either of the provided iterables is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "collatedIterable(java.util.Comparator comparator,java.lang.Iterable a,java.lang.Iterable b)",
    "name": "collatedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Comparator",
            "name": "Comparator",
            "isArray": false
          },
          "name": "comparator"
        },
        "comment": "the comparator defining an ordering over the elements, may be null, in which case natural ordering will be used",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a filtered view on the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either of the provided iterables is null",
        "kind": "THROWS",
        "condition": "args[1]==null || args[2]==null"
      }
    ]
  },
  {
    "signature": "filteredIterable(java.lang.Iterable iterable,org.apache.commons.collections4.Predicate predicate)",
    "name": "filteredIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to filter, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "the predicate used to filter elements, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a filtered view on the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either iterable or predicate is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "boundedIterable(java.lang.Iterable iterable,long maxSize)",
    "name": "boundedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "maxSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to limit, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "maxSize"
        },
        "comment": "the maximum number of elements, must not be negative",
        "kind": "PARAM",
        "condition": "(args[1]<0) == false"
      }
    ],
    "returnTag": {
      "comment": "a bounded view on the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if maxSize is negative",
        "kind": "THROWS",
        "condition": "args[1]<0"
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if iterable is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "loopingIterable(java.lang.Iterable iterable)",
    "name": "loopingIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to loop, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a view of the iterable, providing an infinite loop over its elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if iterable is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "reversedIterable(java.lang.Iterable iterable)",
    "name": "reversedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a reversed view of the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if iterable is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "skippingIterable(java.lang.Iterable iterable,long elementsToSkip)",
    "name": "skippingIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "elementsToSkip"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "elementsToSkip"
        },
        "comment": "the number of elements to skip from the start, must not be negative",
        "kind": "PARAM",
        "condition": "(args[1]<0) == false"
      }
    ],
    "returnTag": {
      "comment": "a view of the specified iterable, skipping the first N elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if elementsToSkip is negative",
        "kind": "THROWS",
        "condition": "args[1]<0"
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if iterable is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "transformedIterable(java.lang.Iterable iterable,org.apache.commons.collections4.Transformer transformer)",
    "name": "transformedIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Transformer",
          "name": "Transformer",
          "isArray": false
        },
        "name": "transformer"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to transform, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Transformer",
            "name": "Transformer",
            "isArray": false
          },
          "name": "transformer"
        },
        "comment": "the transformer, must not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a transformed view of the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either iterable or transformer is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "uniqueIterable(java.lang.Iterable iterable)",
    "name": "uniqueIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a unique view of the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if iterable is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "unmodifiableIterable(java.lang.Iterable iterable)",
    "name": "unmodifiableIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "an unmodifiable view of the specified iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if iterable is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "zippingIterable(java.lang.Iterable a,java.lang.Iterable b)",
    "name": "zippingIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "the first iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "the second iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new iterable, interleaving the provided iterables",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either a or b is null",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "zippingIterable(java.lang.Iterable first,java.lang.Iterable[] others)",
    "name": "zippingIterable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "first"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable[]",
          "name": "Iterable[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          }
        },
        "name": "others"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "first"
        },
        "comment": "the first iterable, may not be null",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable[]",
            "name": "Iterable[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Iterable",
              "name": "Iterable",
              "isArray": false
            }
          },
          "name": "others"
        },
        "comment": "the array of iterables to interleave, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new iterable, interleaving the provided iterables",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either of the provided iterables is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "emptyIfNull(java.lang.Iterable iterable)",
    "name": "emptyIfNull",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable, may be null",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an empty iterable if the argument is null",
      "kind": "RETURN",
      "condition": "args[0]==null ? result.equals(org.apache.commons.collections4.IterableUtils.emptyIterable())"
    },
    "throwsTags": []
  },
  {
    "signature": "forEach(java.lang.Iterable iterable,org.apache.commons.collections4.Closure closure)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Closure",
          "name": "Closure",
          "isArray": false
        },
        "name": "closure"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterator to use, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Closure",
            "name": "Closure",
            "isArray": false
          },
          "name": "closure"
        },
        "comment": "the closure to apply to each element, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if closure is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "forEachButLast(java.lang.Iterable iterable,org.apache.commons.collections4.Closure closure)",
    "name": "forEachButLast",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Closure",
          "name": "Closure",
          "isArray": false
        },
        "name": "closure"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to get the input from, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Closure",
            "name": "Closure",
            "isArray": false
          },
          "name": "closure"
        },
        "comment": "the closure to perform, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the last element in the iterable, or null if iterable is null or empty",
      "kind": "RETURN",
      "condition": "result==null"
    },
    "throwsTags": []
  },
  {
    "signature": "find(java.lang.Iterable iterable,org.apache.commons.collections4.Predicate predicate)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to search, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "the predicate to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the first element of the iterable which matches the predicate or null if none could be found",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if predicate is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "indexOf(java.lang.Iterable iterable,org.apache.commons.collections4.Predicate predicate)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to search, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "the predicate to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the index of the first element which matches the predicate or -1 if none matches",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if predicate is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "matchesAll(java.lang.Iterable iterable,org.apache.commons.collections4.Predicate predicate)",
    "name": "matchesAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the Iterable to use, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "the predicate to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "true if every element of the collection matches the predicate or if the collection is empty, false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if predicate is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "matchesAny(java.lang.Iterable iterable,org.apache.commons.collections4.Predicate predicate)",
    "name": "matchesAny",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the Iterable to use, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "the predicate to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "true if any element of the collection matches the predicate, false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if predicate is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "countMatches(java.lang.Iterable input,org.apache.commons.collections4.Predicate predicate)",
    "name": "countMatches",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "the Iterable to get the input from, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "the predicate to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the number of matches for the predicate in the collection",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if predicate is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "isEmpty(java.lang.Iterable iterable)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the to use, may be null",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the iterable is null or empty, false otherwise",
      "kind": "RETURN",
      "condition": "args[0]==null || org.apache.commons.collections4.IterableUtils.isEmpty(args[0]) ? result == true : result == false"
    },
    "throwsTags": []
  },
  {
    "signature": "contains(java.lang.Iterable iterable,java.lang.Object object)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to check, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "the object to check",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the object is contained in the iterable, false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(java.lang.Iterable iterable,java.lang.Object object,org.apache.commons.collections4.Equator equator)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Equator",
          "name": "Equator",
          "isArray": false
        },
        "name": "equator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to check, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "the object to check",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Equator",
            "name": "Equator",
            "isArray": false
          },
          "name": "equator"
        },
        "comment": "the equator to use to check, may not be null",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "true if the object is contained in the iterable, false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if equator is null",
        "kind": "THROWS",
        "condition": "args[2]==null"
      }
    ]
  },
  {
    "signature": "frequency(java.lang.Iterable iterable,java.lang.Object obj)",
    "name": "frequency",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the Iterable to search",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "obj"
        },
        "comment": "the object to find the cardinality of",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the the number of occurrences of obj in iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "get(java.lang.Iterable iterable,int index)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the Iterable to get a value from, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the index to get",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the object at the specified index",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the index is invalid",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "size(java.lang.Iterable iterable)",
    "name": "size",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to check, may be null",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the number of elements contained in the iterable",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "partition(java.lang.Iterable iterable,org.apache.commons.collections4.Predicate predicate)",
    "name": "partition",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to partition, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "predicate"
        },
        "comment": "the predicate to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a list containing the output collections",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if predicate is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "partition(java.lang.Iterable iterable,org.apache.commons.collections4.Predicate[] predicates)",
    "name": "partition",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate[]",
          "name": "Predicate[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          }
        },
        "name": "predicates"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the collection to get the input from, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate[]",
            "name": "Predicate[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "org.apache.commons.collections4.Predicate",
              "name": "Predicate",
              "isArray": false
            }
          },
          "name": "predicates"
        },
        "comment": "the predicates to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a list containing the output collections",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any predicate is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "partition(java.lang.Iterable iterable,org.apache.commons.collections4.Factory partitionFactory,org.apache.commons.collections4.Predicate[] predicates)",
    "name": "partition",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Factory",
          "name": "Factory",
          "isArray": false
        },
        "name": "partitionFactory"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Predicate[]",
          "name": "Predicate[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "org.apache.commons.collections4.Predicate",
            "name": "Predicate",
            "isArray": false
          }
        },
        "name": "predicates"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the collection to get the input from, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Factory",
            "name": "Factory",
            "isArray": false
          },
          "name": "partitionFactory"
        },
        "comment": "the factory used to create the output collections",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Predicate[]",
            "name": "Predicate[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "org.apache.commons.collections4.Predicate",
              "name": "Predicate",
              "isArray": false
            }
          },
          "name": "predicates"
        },
        "comment": "the predicates to use, may not be null",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a list containing the output collections",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any predicate is null",
        "kind": "THROWS",
        "condition": "args[2]==null"
      }
    ]
  },
  {
    "signature": "toList(java.lang.Iterable iterable)",
    "name": "toList",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to use, may be null",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a list of the iterator contents",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString(java.lang.Iterable iterable)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to convert to a string, may be null",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a string representation of iterable",
      "kind": "RETURN",
      "condition": "true ? result.equals(target.toString())"
    },
    "throwsTags": []
  },
  {
    "signature": "toString(java.lang.Iterable iterable,org.apache.commons.collections4.Transformer transformer)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Transformer",
          "name": "Transformer",
          "isArray": false
        },
        "name": "transformer"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to convert to a string, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Transformer",
            "name": "Transformer",
            "isArray": false
          },
          "name": "transformer"
        },
        "comment": "the transformer used to get a string representation of an element",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a string representation of iterable",
      "kind": "RETURN",
      "condition": "true ? result.equals(org.apache.commons.collections4.IterableUtils.toString())"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "transformer"
        ],
        "comment": "if transformer is null",
        "kind": "THROWS",
        "condition": "args[1]==null"
      }
    ]
  },
  {
    "signature": "toString(java.lang.Iterable iterable,org.apache.commons.collections4.Transformer transformer,java.lang.String delimiter,java.lang.String prefix,java.lang.String suffix)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.collections4.Transformer",
          "name": "Transformer",
          "isArray": false
        },
        "name": "transformer"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delimiter"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "prefix"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "suffix"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to convert to a string, may be null",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.collections4.Transformer",
            "name": "Transformer",
            "isArray": false
          },
          "name": "transformer"
        },
        "comment": "the transformer used to get a string representation of an element",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "delimiter"
        },
        "comment": "the string to delimit elements",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "prefix"
        },
        "comment": "the prefix, prepended to the string representation",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "suffix"
        },
        "comment": "the suffix, appended to the string representation",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a string representation of iterable",
      "kind": "RETURN",
      "condition": "true ? result.equals(args[2])"
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if either transformer, delimiter, prefix or suffix is null",
        "kind": "THROWS",
        "condition": "args[1]==null || args[2]==null || args[3]==null || args[4]==null"
      }
    ]
  },
  {
    "signature": "checkNotNull(java.lang.Iterable iterable)",
    "name": "checkNotNull",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "iterable"
        },
        "comment": "the iterable to check",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if iterable is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "checkNotNull(java.lang.Iterable[] iterables)",
    "name": "checkNotNull",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.IterableUtils",
      "name": "IterableUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.IterableUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable[]",
          "name": "Iterable[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          }
        },
        "name": "iterables"
      }
    ],
    "paramTags": [],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the argument or any of its contents is null",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  }
]